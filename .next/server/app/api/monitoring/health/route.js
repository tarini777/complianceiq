"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/monitoring/health/route";
exports.ids = ["app/api/monitoring/health/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fmonitoring%2Fhealth%2Froute&page=%2Fapi%2Fmonitoring%2Fhealth%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmonitoring%2Fhealth%2Froute.ts&appDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fmonitoring%2Fhealth%2Froute&page=%2Fapi%2Fmonitoring%2Fhealth%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmonitoring%2Fhealth%2Froute.ts&appDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_tarinipersonal_Documents_ComplianceIQ_src_app_api_monitoring_health_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/monitoring/health/route.ts */ \"(rsc)/./src/app/api/monitoring/health/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/monitoring/health/route\",\n        pathname: \"/api/monitoring/health\",\n        filename: \"route\",\n        bundlePath: \"app/api/monitoring/health/route\"\n    },\n    resolvedPagePath: \"/Users/tarinipersonal/Documents/ComplianceIQ/src/app/api/monitoring/health/route.ts\",\n    nextConfigOutput,\n    userland: _Users_tarinipersonal_Documents_ComplianceIQ_src_app_api_monitoring_health_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/monitoring/health/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZtb25pdG9yaW5nJTJGaGVhbHRoJTJGcm91dGUmcGFnZT0lMkZhcGklMkZtb25pdG9yaW5nJTJGaGVhbHRoJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGbW9uaXRvcmluZyUyRmhlYWx0aCUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRnRhcmluaXBlcnNvbmFsJTJGRG9jdW1lbnRzJTJGQ29tcGxpYW5jZUlRJTJGc3JjJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRnRhcmluaXBlcnNvbmFsJTJGRG9jdW1lbnRzJTJGQ29tcGxpYW5jZUlRJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNtQztBQUNoSDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsaWFuY2UtaXEvPzIzN2UiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL3RhcmluaXBlcnNvbmFsL0RvY3VtZW50cy9Db21wbGlhbmNlSVEvc3JjL2FwcC9hcGkvbW9uaXRvcmluZy9oZWFsdGgvcm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL21vbml0b3JpbmcvaGVhbHRoL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvbW9uaXRvcmluZy9oZWFsdGhcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL21vbml0b3JpbmcvaGVhbHRoL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL1VzZXJzL3RhcmluaXBlcnNvbmFsL0RvY3VtZW50cy9Db21wbGlhbmNlSVEvc3JjL2FwcC9hcGkvbW9uaXRvcmluZy9oZWFsdGgvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL21vbml0b3JpbmcvaGVhbHRoL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fmonitoring%2Fhealth%2Froute&page=%2Fapi%2Fmonitoring%2Fhealth%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmonitoring%2Fhealth%2Froute.ts&appDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/monitoring/health/route.ts":
/*!************************************************!*\
  !*** ./src/app/api/monitoring/health/route.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   dynamic: () => (/* binding */ dynamic)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_monitoring_svmHealthMonitor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/monitoring/svmHealthMonitor */ \"(rsc)/./src/lib/monitoring/svmHealthMonitor.ts\");\n/**\n * System Health Monitoring API\n * Provides SVM-based health predictions and monitoring data\n */ \n\n// Force dynamic rendering for this API route\nconst dynamic = \"force-dynamic\";\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const action = searchParams.get(\"action\") || \"report\";\n        const hours = parseInt(searchParams.get(\"hours\") || \"24\");\n        console.log(`System Health Monitoring API called with action: ${action}`);\n        switch(action){\n            case \"report\":\n                // Get comprehensive health report\n                const healthReport = await _lib_monitoring_svmHealthMonitor__WEBPACK_IMPORTED_MODULE_1__.svmHealthMonitor.getHealthReport();\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: true,\n                    data: {\n                        ...healthReport,\n                        summary: {\n                            currentHealthScore: healthReport.current.prediction.healthScore,\n                            currentStatus: healthReport.current.prediction.status,\n                            trend: healthReport.trend.trend,\n                            trendScore: healthReport.trend.trendScore,\n                            recommendations: healthReport.current.prediction.recommendations,\n                            riskFactors: healthReport.current.prediction.riskFactors\n                        }\n                    },\n                    timestamp: new Date().toISOString()\n                });\n            case \"metrics\":\n                // Get current metrics only\n                const currentMetrics = await _lib_monitoring_svmHealthMonitor__WEBPACK_IMPORTED_MODULE_1__.svmHealthMonitor.getCurrentMetrics();\n                const prediction = _lib_monitoring_svmHealthMonitor__WEBPACK_IMPORTED_MODULE_1__.svmHealthMonitor.predictHealth(currentMetrics);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: true,\n                    data: {\n                        metrics: currentMetrics,\n                        prediction\n                    },\n                    timestamp: new Date().toISOString()\n                });\n            case \"trend\":\n                // Get trend analysis\n                const trendAnalysis = _lib_monitoring_svmHealthMonitor__WEBPACK_IMPORTED_MODULE_1__.svmHealthMonitor.getTrendAnalysis(hours);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: true,\n                    data: {\n                        trend: trendAnalysis.trend,\n                        trendScore: trendAnalysis.trendScore,\n                        keyChanges: trendAnalysis.keyChanges,\n                        period: `${hours} hours`\n                    },\n                    timestamp: new Date().toISOString()\n                });\n            case \"history\":\n                // Get historical data\n                const report = await _lib_monitoring_svmHealthMonitor__WEBPACK_IMPORTED_MODULE_1__.svmHealthMonitor.getHealthReport();\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: true,\n                    data: {\n                        historical: report.historical,\n                        count: report.historical.length,\n                        period: \"Last 24 data points\"\n                    },\n                    timestamp: new Date().toISOString()\n                });\n            default:\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: false,\n                    error: \"Invalid action parameter. Supported actions: report, metrics, trend, history\"\n                }, {\n                    status: 400\n                });\n        }\n    } catch (error) {\n        console.error(\"Error in health monitoring API:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Failed to retrieve health monitoring data\",\n            details: error instanceof Error ? error.message : \"Unknown error\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        if (!body.metrics) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Metrics data is required\"\n            }, {\n                status: 400\n            });\n        }\n        // Add custom metrics data point\n        const dataPoint = _lib_monitoring_svmHealthMonitor__WEBPACK_IMPORTED_MODULE_1__.svmHealthMonitor.addDataPoint(body.metrics);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            data: dataPoint,\n            message: \"Health monitoring data point added successfully\",\n            timestamp: new Date().toISOString()\n        });\n    } catch (error) {\n        console.error(\"Error adding health monitoring data:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Failed to add health monitoring data\",\n            details: error instanceof Error ? error.message : \"Unknown error\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/monitoring/health/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/monitoring/svmHealthMonitor.ts":
/*!************************************************!*\
  !*** ./src/lib/monitoring/svmHealthMonitor.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SVMHealthMonitor: () => (/* binding */ SVMHealthMonitor),\n/* harmony export */   svmHealthMonitor: () => (/* binding */ svmHealthMonitor)\n/* harmony export */ });\n/**\n * SVM-based System Health Monitoring\n * Uses Support Vector Machine approach for real-time system health prediction\n */ /**\n * Simplified SVM-like approach for system health monitoring\n * Uses weighted scoring and threshold-based classification\n */ class SVMHealthMonitor {\n    /**\n   * Predict system health based on current metrics\n   */ predictHealth(metrics) {\n        // Normalize metrics to 0-100 scale\n        const normalizedMetrics = this.normalizeMetrics(metrics);\n        // Calculate weighted health score\n        const healthScore = this.calculateHealthScore(normalizedMetrics);\n        // Determine status based on thresholds\n        const status = this.determineStatus(healthScore);\n        // Generate predictions for different time horizons\n        const predictions = this.generatePredictions(healthScore);\n        // Generate recommendations based on current state\n        const recommendations = this.generateRecommendations(normalizedMetrics, status);\n        // Identify risk factors\n        const riskFactors = this.identifyRiskFactors(normalizedMetrics);\n        return {\n            healthScore,\n            status,\n            predictions,\n            recommendations,\n            riskFactors\n        };\n    }\n    /**\n   * Add monitoring data to history for trend analysis\n   */ addDataPoint(metrics) {\n        const prediction = this.predictHealth(metrics);\n        const dataPoint = {\n            timestamp: new Date(),\n            metrics,\n            prediction\n        };\n        this.historicalData.push(dataPoint);\n        // Keep only recent data\n        if (this.historicalData.length > this.maxHistorySize) {\n            this.historicalData = this.historicalData.slice(-this.maxHistorySize);\n        }\n        return dataPoint;\n    }\n    /**\n   * Get trend analysis from historical data\n   */ getTrendAnalysis(hours = 24) {\n        const cutoffTime = new Date(Date.now() - hours * 60 * 60 * 1000);\n        const recentData = this.historicalData.filter((data)=>data.timestamp >= cutoffTime);\n        if (recentData.length < 2) {\n            return {\n                trend: \"stable\",\n                trendScore: 0,\n                keyChanges: [\n                    \"Insufficient data for trend analysis\"\n                ]\n            };\n        }\n        // Calculate trend score (positive = improving, negative = declining)\n        const trendScore = this.calculateTrendScore(recentData);\n        // Determine trend direction\n        const trend = trendScore > 0.1 ? \"improving\" : trendScore < -0.1 ? \"declining\" : \"stable\";\n        // Identify key changes\n        const keyChanges = this.identifyKeyChanges(recentData);\n        return {\n            trend,\n            trendScore,\n            keyChanges\n        };\n    }\n    /**\n   * Normalize metrics to 0-100 scale\n   */ normalizeMetrics(metrics) {\n        return {\n            apiResponseTime: Math.max(0, 100 - metrics.apiResponseTime / 10),\n            databaseQueryTime: Math.max(0, 100 - metrics.databaseQueryTime / 5),\n            memoryUsage: Math.max(0, 100 - metrics.memoryUsage / 10),\n            cpuUsage: Math.max(0, 100 - metrics.cpuUsage / 10),\n            errorRate: Math.max(0, 100 - metrics.errorRate * 100),\n            userSatisfaction: metrics.userSatisfaction,\n            assessmentCompletionRate: metrics.assessmentCompletionRate,\n            askRexiResponseTime: Math.max(0, 100 - metrics.askRexiResponseTime / 10),\n            activeUsers: Math.min(100, metrics.activeUsers * 2),\n            systemLoad: Math.max(0, 100 - metrics.systemLoad / 10) // Lower is better\n        };\n    }\n    /**\n   * Calculate weighted health score\n   */ calculateHealthScore(normalizedMetrics) {\n        let score = 0;\n        Object.entries(this.weights).forEach(([key, weight])=>{\n            const value = normalizedMetrics[key];\n            score += value * weight;\n        });\n        return Math.round(Math.max(0, Math.min(100, score)));\n    }\n    /**\n   * Determine status based on health score\n   */ determineStatus(healthScore) {\n        if (healthScore >= this.thresholds.excellent) return \"excellent\";\n        if (healthScore >= this.thresholds.good) return \"good\";\n        if (healthScore >= this.thresholds.warning) return \"warning\";\n        return \"critical\";\n    }\n    /**\n   * Generate predictions for different time horizons\n   */ generatePredictions(healthScore) {\n        // Simple linear trend prediction based on current score\n        const trend = this.getTrendAnalysis(1).trendScore;\n        return {\n            nextHour: Math.round(Math.max(0, Math.min(100, healthScore + trend * 0.1))),\n            nextDay: Math.round(Math.max(0, Math.min(100, healthScore + trend * 2))),\n            nextWeek: Math.round(Math.max(0, Math.min(100, healthScore + trend * 14)))\n        };\n    }\n    /**\n   * Generate recommendations based on current state\n   */ generateRecommendations(normalizedMetrics, status) {\n        const recommendations = [];\n        if (normalizedMetrics.apiResponseTime < 70) {\n            recommendations.push(\"Optimize API response times - consider caching or query optimization\");\n        }\n        if (normalizedMetrics.databaseQueryTime < 70) {\n            recommendations.push(\"Review database queries for performance bottlenecks\");\n        }\n        if (normalizedMetrics.memoryUsage < 70) {\n            recommendations.push(\"Monitor memory usage - consider memory optimization\");\n        }\n        if (normalizedMetrics.cpuUsage < 70) {\n            recommendations.push(\"High CPU usage detected - check for resource-intensive processes\");\n        }\n        if (normalizedMetrics.errorRate < 70) {\n            recommendations.push(\"Error rate is elevated - investigate error logs\");\n        }\n        if (normalizedMetrics.userSatisfaction < 70) {\n            recommendations.push(\"User satisfaction is low - gather feedback and improve UX\");\n        }\n        if (normalizedMetrics.assessmentCompletionRate < 70) {\n            recommendations.push(\"Assessment completion rate is low - simplify workflow or provide better guidance\");\n        }\n        if (normalizedMetrics.askRexiResponseTime < 70) {\n            recommendations.push(\"AskRexi response time is slow - optimize AI processing\");\n        }\n        if (status === \"critical\") {\n            recommendations.unshift(\"CRITICAL: Immediate attention required for system stability\");\n        } else if (status === \"warning\") {\n            recommendations.unshift(\"WARNING: Proactive monitoring and optimization recommended\");\n        }\n        return recommendations.slice(0, 5); // Limit to top 5 recommendations\n    }\n    /**\n   * Identify risk factors\n   */ identifyRiskFactors(normalizedMetrics) {\n        const risks = [];\n        if (normalizedMetrics.apiResponseTime < 50) risks.push(\"API Performance Degradation\");\n        if (normalizedMetrics.databaseQueryTime < 50) risks.push(\"Database Performance Issues\");\n        if (normalizedMetrics.memoryUsage < 50) risks.push(\"Memory Pressure\");\n        if (normalizedMetrics.cpuUsage < 50) risks.push(\"High CPU Load\");\n        if (normalizedMetrics.errorRate < 50) risks.push(\"High Error Rate\");\n        if (normalizedMetrics.userSatisfaction < 50) risks.push(\"User Experience Issues\");\n        if (normalizedMetrics.assessmentCompletionRate < 50) risks.push(\"Low Engagement\");\n        if (normalizedMetrics.askRexiResponseTime < 50) risks.push(\"AI Service Degradation\");\n        return risks;\n    }\n    /**\n   * Calculate trend score from historical data\n   */ calculateTrendScore(data) {\n        if (data.length < 2) return 0;\n        const recent = data.slice(-Math.min(10, data.length));\n        const older = data.slice(0, Math.max(1, data.length - 10));\n        const recentAvg = recent.reduce((sum, d)=>sum + d.prediction.healthScore, 0) / recent.length;\n        const olderAvg = older.reduce((sum, d)=>sum + d.prediction.healthScore, 0) / older.length;\n        return (recentAvg - olderAvg) / 100; // Normalize to -1 to 1 range\n    }\n    /**\n   * Identify key changes in recent data\n   */ identifyKeyChanges(data) {\n        const changes = [];\n        if (data.length < 2) return [\n            \"Insufficient data for change analysis\"\n        ];\n        const latest = data[data.length - 1];\n        const previous = data[data.length - 2];\n        const metricsDiff = {\n            apiResponseTime: latest.metrics.apiResponseTime - previous.metrics.apiResponseTime,\n            databaseQueryTime: latest.metrics.databaseQueryTime - previous.metrics.databaseQueryTime,\n            errorRate: latest.metrics.errorRate - previous.metrics.errorRate,\n            userSatisfaction: latest.metrics.userSatisfaction - previous.metrics.userSatisfaction,\n            assessmentCompletionRate: latest.metrics.assessmentCompletionRate - previous.metrics.assessmentCompletionRate\n        };\n        if (Math.abs(metricsDiff.apiResponseTime) > 50) {\n            changes.push(`API response time ${metricsDiff.apiResponseTime > 0 ? \"increased\" : \"decreased\"} by ${Math.abs(metricsDiff.apiResponseTime)}ms`);\n        }\n        if (Math.abs(metricsDiff.databaseQueryTime) > 20) {\n            changes.push(`Database query time ${metricsDiff.databaseQueryTime > 0 ? \"increased\" : \"decreased\"} by ${Math.abs(metricsDiff.databaseQueryTime)}ms`);\n        }\n        if (Math.abs(metricsDiff.errorRate) > 0.01) {\n            changes.push(`Error rate ${metricsDiff.errorRate > 0 ? \"increased\" : \"decreased\"} by ${(Math.abs(metricsDiff.errorRate) * 100).toFixed(1)}%`);\n        }\n        if (Math.abs(metricsDiff.userSatisfaction) > 5) {\n            changes.push(`User satisfaction ${metricsDiff.userSatisfaction > 0 ? \"improved\" : \"declined\"} by ${Math.abs(metricsDiff.userSatisfaction)} points`);\n        }\n        if (Math.abs(metricsDiff.assessmentCompletionRate) > 5) {\n            changes.push(`Assessment completion rate ${metricsDiff.assessmentCompletionRate > 0 ? \"increased\" : \"decreased\"} by ${Math.abs(metricsDiff.assessmentCompletionRate)}%`);\n        }\n        return changes.length > 0 ? changes : [\n            \"No significant changes detected\"\n        ];\n    }\n    /**\n   * Get current system metrics (mock implementation)\n   */ async getCurrentMetrics() {\n        // In a real implementation, this would collect actual system metrics\n        return {\n            apiResponseTime: Math.random() * 200 + 50,\n            databaseQueryTime: Math.random() * 100 + 20,\n            memoryUsage: Math.random() * 80 + 20,\n            cpuUsage: Math.random() * 70 + 10,\n            errorRate: Math.random() * 0.05,\n            userSatisfaction: Math.random() * 30 + 70,\n            assessmentCompletionRate: Math.random() * 30 + 70,\n            askRexiResponseTime: Math.random() * 300 + 100,\n            activeUsers: Math.floor(Math.random() * 50) + 10,\n            systemLoad: Math.random() * 80 + 20 // 20-100%\n        };\n    }\n    /**\n   * Get comprehensive health report\n   */ async getHealthReport() {\n        const metrics = await this.getCurrentMetrics();\n        const current = this.addDataPoint(metrics);\n        const trend = this.getTrendAnalysis(24);\n        return {\n            current,\n            trend,\n            historical: this.historicalData.slice(-24) // Last 24 data points\n        };\n    }\n    constructor(){\n        this.historicalData = [];\n        this.maxHistorySize = 1000;\n        this.weights = {\n            apiResponseTime: 0.15,\n            databaseQueryTime: 0.15,\n            memoryUsage: 0.12,\n            cpuUsage: 0.12,\n            errorRate: 0.20,\n            userSatisfaction: 0.10,\n            assessmentCompletionRate: 0.08,\n            askRexiResponseTime: 0.05,\n            activeUsers: 0.03\n        };\n        this.thresholds = {\n            excellent: 85,\n            good: 70,\n            warning: 50,\n            critical: 30\n        };\n    }\n}\n// Export singleton instance\nconst svmHealthMonitor = new SVMHealthMonitor();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/monitoring/svmHealthMonitor.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fmonitoring%2Fhealth%2Froute&page=%2Fapi%2Fmonitoring%2Fhealth%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmonitoring%2Fhealth%2Froute.ts&appDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();