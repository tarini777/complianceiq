"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/askrexi/route";
exports.ids = ["app/api/askrexi/route"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Faskrexi%2Froute&page=%2Fapi%2Faskrexi%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Faskrexi%2Froute.ts&appDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Faskrexi%2Froute&page=%2Fapi%2Faskrexi%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Faskrexi%2Froute.ts&appDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_tarinipersonal_Documents_ComplianceIQ_src_app_api_askrexi_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/askrexi/route.ts */ \"(rsc)/./src/app/api/askrexi/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/askrexi/route\",\n        pathname: \"/api/askrexi\",\n        filename: \"route\",\n        bundlePath: \"app/api/askrexi/route\"\n    },\n    resolvedPagePath: \"/Users/tarinipersonal/Documents/ComplianceIQ/src/app/api/askrexi/route.ts\",\n    nextConfigOutput,\n    userland: _Users_tarinipersonal_Documents_ComplianceIQ_src_app_api_askrexi_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/askrexi/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZhc2tyZXhpJTJGcm91dGUmcGFnZT0lMkZhcGklMkZhc2tyZXhpJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGYXNrcmV4aSUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRnRhcmluaXBlcnNvbmFsJTJGRG9jdW1lbnRzJTJGQ29tcGxpYW5jZUlRJTJGc3JjJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRnRhcmluaXBlcnNvbmFsJTJGRG9jdW1lbnRzJTJGQ29tcGxpYW5jZUlRJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUN5QjtBQUN0RztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsaWFuY2UtaXEvPzM2MTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL3RhcmluaXBlcnNvbmFsL0RvY3VtZW50cy9Db21wbGlhbmNlSVEvc3JjL2FwcC9hcGkvYXNrcmV4aS9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvYXNrcmV4aS9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2Fza3JleGlcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2Fza3JleGkvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvdGFyaW5pcGVyc29uYWwvRG9jdW1lbnRzL0NvbXBsaWFuY2VJUS9zcmMvYXBwL2FwaS9hc2tyZXhpL3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9hc2tyZXhpL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Faskrexi%2Froute&page=%2Fapi%2Faskrexi%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Faskrexi%2Froute.ts&appDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/askrexi/route.ts":
/*!**************************************!*\
  !*** ./src/app/api/askrexi/route.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/prisma */ \"(rsc)/./src/lib/prisma.ts\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_2__);\n/**\n * AskRexi Chatbot API - ComplianceIQ System\n * Intelligent regulatory compliance assistant with training data and caching\n */ \n\n\nasync function POST(request) {\n    const startTime = Date.now();\n    try {\n        const body = await request.json();\n        const { question, context } = body;\n        if (!question || question.trim().length === 0) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Question is required\"\n            }, {\n                status: 400\n            });\n        }\n        const normalizedQuestion = question.trim().toLowerCase();\n        // Check if question is non-contextual (weather, sports, etc.)\n        const isNonContextual = await checkNonContextualQuestion(normalizedQuestion);\n        if (isNonContextual) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: true,\n                data: {\n                    answer: `I'm AskRexi, your regulatory compliance assistant. I specialize in helping with regulatory intelligence, assessment support, and analytics for pharmaceutical AI compliance. I can't help with ${isNonContextual.category} questions, but I'd be happy to assist you with compliance-related questions!`,\n                    category: \"general\",\n                    sources: [],\n                    actionItems: [\n                        \"Ask about FDA, EMA, or ICH regulations\",\n                        \"Get guidance on assessment questions\",\n                        \"Request analytics and performance insights\",\n                        \"Learn about compliance requirements\"\n                    ],\n                    impactLevel: \"low\",\n                    relatedQuestions: [\n                        \"What are the latest FDA guidelines for AI in healthcare?\",\n                        \"How do I complete the data governance assessment section?\",\n                        \"What is our current compliance score?\",\n                        \"What regulations apply to our therapeutic area?\"\n                    ]\n                }\n            });\n        }\n        // Generate question hash for caching\n        const questionHash = generateQuestionHash(normalizedQuestion, context);\n        // Check response cache first\n        const cachedResponse = await getCachedResponse(questionHash);\n        if (cachedResponse) {\n            // Update cache hit count and last accessed\n            await updateCacheHit(questionHash);\n            // Log usage analytics\n            await logUsageAnalytics(question, cachedResponse.category, Date.now() - startTime, context);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: true,\n                data: cachedResponse,\n                cached: true\n            });\n        }\n        // Process the question and generate response\n        const response = await processAskRexiQuery(question, context);\n        // Cache the response\n        await cacheResponse(questionHash, question, response);\n        // Log usage analytics\n        await logUsageAnalytics(question, response.category, Date.now() - startTime, context);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            data: response,\n            cached: false\n        });\n    } catch (error) {\n        console.error(\"Error processing AskRexi query:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Failed to process question\",\n            details: error instanceof Error ? error.message : \"Unknown error\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function processAskRexiQuery(question, context) {\n    const normalizedQuestion = question.toLowerCase().trim();\n    // Analyze conversation context and user intent\n    const conversationContext = analyzeConversationContext(question, context);\n    const userIntent = analyzeUserIntent(question, conversationContext);\n    // First, try to find exact or similar matches in training data\n    const trainingMatch = await findTrainingDataMatch(normalizedQuestion, context);\n    if (trainingMatch) {\n        return enhanceResponseWithIntelligence(trainingMatch, userIntent, conversationContext);\n    }\n    // Determine question category with enhanced intelligence\n    const category = categorizeQuestionIntelligently(normalizedQuestion, userIntent);\n    let response;\n    switch(category){\n        case \"regulatory\":\n            response = await handleRegulatoryQueryIntelligently(question, context, userIntent);\n            break;\n        case \"assessment\":\n            response = await handleAssessmentQueryIntelligently(question, context, userIntent);\n            break;\n        case \"analytics\":\n            response = await handleAnalyticsQueryIntelligently(question, context, userIntent);\n            break;\n        default:\n            response = await handleGeneralQueryIntelligently(question, context, userIntent);\n    }\n    return enhanceResponseWithIntelligence(response, userIntent, conversationContext);\n}\n// New helper functions for training data and caching\nasync function checkNonContextualQuestion(question) {\n    // Mock patterns for non-contextual questions\n    const patterns = [\n        {\n            pattern: \"hello|hi|hey\",\n            category: \"greeting\"\n        },\n        {\n            pattern: \"what is|what are|define\",\n            category: \"definition\"\n        },\n        {\n            pattern: \"how to|how do i\",\n            category: \"instruction\"\n        },\n        {\n            pattern: \"when|where|who\",\n            category: \"information\"\n        }\n    ];\n    for (const pattern of patterns){\n        const regex = new RegExp(pattern.pattern, \"i\");\n        if (regex.test(question)) {\n            return {\n                category: pattern.category\n            };\n        }\n    }\n    return null;\n}\nfunction generateQuestionHash(question, context) {\n    const contextString = context ? JSON.stringify(context) : \"\";\n    const hashInput = `${question}:${contextString}`;\n    return crypto__WEBPACK_IMPORTED_MODULE_2___default().createHash(\"sha256\").update(hashInput).digest(\"hex\");\n}\nasync function getCachedResponse(questionHash) {\n    // Mock cache - in a real implementation, this would use Redis or database\n    return null;\n}\nasync function cacheResponse(questionHash, originalQuestion, response) {\n    // Mock cache - in a real implementation, this would store in Redis or database\n    console.log(`Caching response for question: ${originalQuestion.substring(0, 50)}...`);\n}\nasync function updateCacheHit(questionHash) {\n    // Mock cache hit update - in a real implementation, this would update cache statistics\n    console.log(`Cache hit for question hash: ${questionHash.substring(0, 8)}...`);\n}\nasync function logUsageAnalytics(question, category, responseTime, context) {\n    // Mock analytics logging - in a real implementation, this would store analytics data\n    console.log(`Analytics: ${category} question (${responseTime}ms): ${question.substring(0, 50)}...`);\n}\nasync function findTrainingDataMatch(question, context) {\n    // Mock training data - in a real implementation, this would query the training database\n    const mockTrainingData = [\n        {\n            question: \"what is ai compliance\",\n            answer: \"AI compliance refers to ensuring that artificial intelligence systems meet regulatory requirements, ethical standards, and industry best practices.\",\n            category: \"definition\",\n            keywords: [\n                \"ai\",\n                \"compliance\",\n                \"regulatory\"\n            ]\n        },\n        {\n            question: \"how to validate ai models\",\n            answer: \"AI model validation involves testing model performance, bias detection, explainability assessment, and regulatory compliance verification.\",\n            category: \"process\",\n            keywords: [\n                \"validation\",\n                \"models\",\n                \"testing\"\n            ]\n        }\n    ];\n    const lowerQuestion = question.toLowerCase();\n    // Try exact match\n    for (const data of mockTrainingData){\n        if (data.question === lowerQuestion) {\n            return {\n                answer: data.answer,\n                category: data.category,\n                sources: [\n                    {\n                        type: \"guidance\",\n                        title: \"Training Data\",\n                        content: data.answer,\n                        url: undefined\n                    }\n                ],\n                actionItems: [],\n                impactLevel: \"medium\",\n                relatedQuestions: []\n            };\n        }\n    }\n    // Try keyword matching\n    const keywords = extractKeywords(question);\n    for (const data of mockTrainingData){\n        const hasKeywordMatch = keywords.some((keyword)=>data.keywords.some((dataKeyword)=>dataKeyword.includes(keyword)));\n        if (hasKeywordMatch) {\n            return {\n                answer: data.answer,\n                category: data.category,\n                sources: [\n                    {\n                        type: \"guidance\",\n                        title: \"Training Data\",\n                        content: data.answer,\n                        url: undefined\n                    }\n                ],\n                actionItems: [],\n                impactLevel: \"medium\",\n                relatedQuestions: []\n            };\n        }\n    }\n    return null;\n}\nfunction convertTrainingDataToResponse(trainingData) {\n    return {\n        answer: trainingData.answer,\n        category: trainingData.category,\n        sources: trainingData.sources.map((source)=>({\n                type: \"regulation\",\n                title: source,\n                content: `Information from ${source}`,\n                url: `/regulatory/${source.toLowerCase().replace(/\\s+/g, \"-\")}`\n            })),\n        actionItems: trainingData.actionItems,\n        impactLevel: trainingData.impactLevel,\n        relatedQuestions: generateRelatedQuestions(trainingData.category, trainingData.question)\n    };\n}\nfunction extractKeywords(question) {\n    const contextualKeywords = [\n        \"fda\",\n        \"ema\",\n        \"ich\",\n        \"regulation\",\n        \"guideline\",\n        \"compliance\",\n        \"regulatory\",\n        \"assessment\",\n        \"question\",\n        \"section\",\n        \"requirement\",\n        \"evidence\",\n        \"documentation\",\n        \"analytics\",\n        \"report\",\n        \"performance\",\n        \"score\",\n        \"trend\",\n        \"metric\",\n        \"dashboard\",\n        \"ai\",\n        \"artificial intelligence\",\n        \"machine learning\",\n        \"model\",\n        \"algorithm\",\n        \"pharmaceutical\",\n        \"pharma\",\n        \"drug\",\n        \"medicine\",\n        \"therapeutic\",\n        \"clinical\",\n        \"quality\",\n        \"governance\",\n        \"risk\",\n        \"safety\",\n        \"efficacy\",\n        \"validation\"\n    ];\n    const questionLower = question.toLowerCase();\n    return contextualKeywords.filter((keyword)=>questionLower.includes(keyword));\n}\n// Intelligent conversation analysis functions\nfunction analyzeConversationContext(question, context) {\n    const conversationHistory = context?.conversationHistory || [];\n    const userPreferences = context?.userPreferences || {};\n    // Analyze recent conversation topics\n    const recentTopics = conversationHistory.slice(-5) // Last 5 messages\n    .map((msg)=>extractKeywords(msg.content)).flat();\n    // Determine conversation flow\n    const isFollowUp = isFollowUpQuestion(question, conversationHistory);\n    const isClarification = isClarificationQuestion(question);\n    const isUrgent = isUrgentQuestion(question);\n    return {\n        recentTopics,\n        isFollowUp,\n        isClarification,\n        isUrgent,\n        userPreferences,\n        conversationLength: conversationHistory.length\n    };\n}\nfunction analyzeUserIntent(question, conversationContext) {\n    const questionLower = question.toLowerCase();\n    // Intent patterns\n    const intents = {\n        seekingInformation: /what|how|when|where|why|which|tell me|explain|describe/i,\n        requestingGuidance: /help|guide|assist|support|advice|recommend|suggest/i,\n        askingForClarification: /clarify|explain more|what do you mean|can you elaborate/i,\n        requestingExamples: /example|sample|show me|demonstrate|illustrate/i,\n        comparingOptions: /compare|difference|versus|vs|better|best|which is/i,\n        seekingValidation: /correct|right|accurate|valid|proper|appropriate/i,\n        requestingAction: /do|create|make|build|implement|start|begin/i,\n        expressingConcern: /concern|worry|issue|problem|challenge|difficulty/i\n    };\n    const detectedIntents = Object.entries(intents).filter(([_, pattern])=>pattern.test(question)).map(([intent, _])=>intent);\n    // Determine expertise level from question complexity\n    const expertiseLevel = determineExpertiseLevel(question);\n    // Determine urgency\n    const urgency = conversationContext.isUrgent ? \"high\" : /urgent|asap|immediately|quickly|soon/i.test(question) ? \"medium\" : \"low\";\n    return {\n        intents: detectedIntents,\n        expertiseLevel,\n        urgency,\n        isFollowUp: conversationContext.isFollowUp,\n        isClarification: conversationContext.isClarification\n    };\n}\nfunction isFollowUpQuestion(question, history) {\n    if (history.length === 0) return false;\n    const followUpIndicators = [\n        \"also\",\n        \"additionally\",\n        \"furthermore\",\n        \"moreover\",\n        \"what about\",\n        \"how about\",\n        \"can you also\",\n        \"in addition\",\n        \"besides\",\n        \"on top of that\",\n        \"and\",\n        \"but\",\n        \"however\",\n        \"on the other hand\",\n        \"alternatively\",\n        \"instead\"\n    ];\n    const questionLower = question.toLowerCase();\n    return followUpIndicators.some((indicator)=>questionLower.includes(indicator));\n}\nfunction isClarificationQuestion(question) {\n    const clarificationPatterns = [\n        /what do you mean/i,\n        /can you clarify/i,\n        /can you explain/i,\n        /i don't understand/i,\n        /could you elaborate/i,\n        /what does that mean/i,\n        /can you be more specific/i\n    ];\n    return clarificationPatterns.some((pattern)=>pattern.test(question));\n}\nfunction isUrgentQuestion(question) {\n    const urgentPatterns = [\n        /urgent|asap|immediately|quickly|emergency|critical|important|deadline/i\n    ];\n    return urgentPatterns.some((pattern)=>pattern.test(question));\n}\nfunction determineExpertiseLevel(question) {\n    const expertTerms = [\n        \"algorithm\",\n        \"architecture\",\n        \"implementation\",\n        \"optimization\",\n        \"scalability\",\n        \"microservices\",\n        \"kubernetes\",\n        \"docker\",\n        \"api\",\n        \"endpoint\",\n        \"middleware\",\n        \"database\",\n        \"schema\",\n        \"migration\",\n        \"indexing\",\n        \"query optimization\"\n    ];\n    const beginnerTerms = [\n        \"what is\",\n        \"how do i\",\n        \"beginner\",\n        \"new to\",\n        \"learning\",\n        \"tutorial\",\n        \"introduction\",\n        \"basics\",\n        \"simple\",\n        \"easy\",\n        \"step by step\"\n    ];\n    const questionLower = question.toLowerCase();\n    const expertCount = expertTerms.filter((term)=>questionLower.includes(term)).length;\n    const beginnerCount = beginnerTerms.filter((term)=>questionLower.includes(term)).length;\n    if (expertCount > beginnerCount && expertCount > 0) return \"expert\";\n    if (beginnerCount > expertCount && beginnerCount > 0) return \"beginner\";\n    return \"intermediate\";\n}\nfunction categorizeQuestionIntelligently(question, userIntent) {\n    // Enhanced categorization based on intent and context\n    const questionLower = question.toLowerCase();\n    // Regulatory indicators\n    if (userIntent.intents.includes(\"seekingInformation\") && /fda|ema|ich|regulation|guideline|compliance|regulatory|approval|submission/i.test(questionLower)) {\n        return \"regulatory\";\n    }\n    // Assessment indicators\n    if (userIntent.intents.includes(\"requestingGuidance\") && /assessment|question|section|requirement|evidence|documentation|validation/i.test(questionLower)) {\n        return \"assessment\";\n    }\n    // Analytics indicators\n    if (userIntent.intents.includes(\"seekingInformation\") && /analytics|report|performance|score|trend|metric|dashboard|data|statistics/i.test(questionLower)) {\n        return \"analytics\";\n    }\n    // Fallback to original categorization\n    return categorizeQuestion(question);\n}\nfunction enhanceResponseWithIntelligence(response, userIntent, conversationContext) {\n    // Personalize response based on user intent and context\n    let enhancedAnswer = response.answer;\n    // Add conversational elements\n    if (userIntent.isFollowUp) {\n        enhancedAnswer = `Great follow-up question! ${enhancedAnswer}`;\n    }\n    if (userIntent.isClarification) {\n        enhancedAnswer = `Let me clarify that for you. ${enhancedAnswer}`;\n    }\n    if (userIntent.urgency === \"high\") {\n        enhancedAnswer = `I understand this is urgent. ${enhancedAnswer}`;\n    }\n    // Adjust complexity based on expertise level\n    if (userIntent.expertiseLevel === \"beginner\") {\n        enhancedAnswer = simplifyLanguage(enhancedAnswer);\n    } else if (userIntent.expertiseLevel === \"expert\") {\n        enhancedAnswer = addTechnicalDetails(enhancedAnswer);\n    }\n    // Add contextual follow-up questions\n    const contextualFollowUps = generateContextualFollowUps(userIntent, conversationContext);\n    return {\n        ...response,\n        answer: enhancedAnswer,\n        relatedQuestions: [\n            ...response.relatedQuestions,\n            ...contextualFollowUps\n        ]\n    };\n}\nfunction simplifyLanguage(text) {\n    // Replace complex terms with simpler explanations\n    const simplifications = {\n        \"regulatory compliance\": \"following rules and regulations\",\n        \"pharmaceutical\": \"drug and medicine\",\n        \"clinical validation\": \"testing in real medical settings\",\n        \"algorithmic transparency\": \"being able to explain how the AI works\",\n        \"data governance\": \"managing and protecting data properly\"\n    };\n    let simplified = text;\n    Object.entries(simplifications).forEach(([complex, simple])=>{\n        simplified = simplified.replace(new RegExp(complex, \"gi\"), simple);\n    });\n    return simplified;\n}\nfunction addTechnicalDetails(text) {\n    // Add technical depth for expert users\n    const technicalAdditions = {\n        \"FDA guidelines\": \"FDA guidelines (21 CFR Part 11, ICH E6(R3))\",\n        \"data quality\": \"data quality (completeness, accuracy, consistency, validity)\",\n        \"model validation\": \"model validation (cross-validation, hold-out testing, bias assessment)\"\n    };\n    let enhanced = text;\n    Object.entries(technicalAdditions).forEach(([term, addition])=>{\n        enhanced = enhanced.replace(new RegExp(term, \"gi\"), addition);\n    });\n    return enhanced;\n}\nfunction generateContextualFollowUps(userIntent, conversationContext) {\n    const followUps = [];\n    if (userIntent.intents.includes(\"seekingInformation\")) {\n        followUps.push(\"Would you like me to explain any specific aspect in more detail?\");\n    }\n    if (userIntent.intents.includes(\"requestingGuidance\")) {\n        followUps.push(\"Do you need help implementing this in your organization?\");\n    }\n    if (userIntent.intents.includes(\"requestingExamples\")) {\n        followUps.push(\"Would you like to see a real-world example of this?\");\n    }\n    if (conversationContext.recentTopics.length > 0) {\n        followUps.push(\"How does this relate to your previous questions about compliance?\");\n    }\n    return followUps;\n}\nfunction categorizeQuestion(question) {\n    const regulatoryKeywords = [\n        \"regulation\",\n        \"fda\",\n        \"ema\",\n        \"ich\",\n        \"guideline\",\n        \"compliance\",\n        \"regulatory\",\n        \"approval\",\n        \"submission\",\n        \"clinical trial\",\n        \"safety\",\n        \"efficacy\",\n        \"gcp\",\n        \"gmp\",\n        \"glp\",\n        \"qms\",\n        \"risk management\",\n        \"pharmacovigilance\"\n    ];\n    const assessmentKeywords = [\n        \"assessment\",\n        \"question\",\n        \"section\",\n        \"requirement\",\n        \"evidence\",\n        \"documentation\",\n        \"validation\",\n        \"verification\",\n        \"testing\",\n        \"protocol\",\n        \"standard operating procedure\",\n        \"sop\",\n        \"checklist\",\n        \"audit\",\n        \"inspection\"\n    ];\n    const analyticsKeywords = [\n        \"analytics\",\n        \"report\",\n        \"performance\",\n        \"score\",\n        \"trend\",\n        \"metric\",\n        \"dashboard\",\n        \"insight\",\n        \"recommendation\",\n        \"benchmark\",\n        \"comparison\",\n        \"statistics\",\n        \"data\"\n    ];\n    const questionLower = question.toLowerCase();\n    if (regulatoryKeywords.some((keyword)=>questionLower.includes(keyword))) {\n        return \"regulatory\";\n    } else if (assessmentKeywords.some((keyword)=>questionLower.includes(keyword))) {\n        return \"assessment\";\n    } else if (analyticsKeywords.some((keyword)=>questionLower.includes(keyword))) {\n        return \"analytics\";\n    }\n    return \"general\";\n}\nasync function handleRegulatoryQueryIntelligently(question, context, userIntent) {\n    // Enhanced regulatory query handling with intelligence\n    const response = await handleRegulatoryQuery(question, context);\n    // Add intelligent context based on user intent\n    if (userIntent?.intents.includes(\"requestingExamples\")) {\n        response.answer += `\\n\\n**Real-world Example:** Many pharmaceutical companies have successfully implemented these guidelines by establishing cross-functional AI governance teams that include regulatory affairs, data science, and clinical experts working together to ensure compliance.`;\n    }\n    if (userIntent?.intents.includes(\"expressingConcern\")) {\n        response.answer += `\\n\\n**Don't worry** - these guidelines are designed to help you succeed. I can provide step-by-step guidance to address any specific concerns you have.`;\n    }\n    return response;\n}\nasync function handleAssessmentQueryIntelligently(question, context, userIntent) {\n    // Enhanced assessment query handling with intelligence\n    const response = await handleAssessmentQuery(question, context);\n    // Add intelligent context based on user intent\n    if (userIntent?.intents.includes(\"requestingGuidance\")) {\n        response.answer += `\\n\\n**Pro Tip:** I recommend tackling the most critical sections first, as they often have dependencies that affect other areas. Would you like me to help you prioritize based on your specific situation?`;\n    }\n    if (userIntent?.expertiseLevel === \"beginner\") {\n        response.answer += `\\n\\n**Getting Started:** Don't feel overwhelmed! Start with one section at a time, and I'm here to guide you through each step.`;\n    }\n    return response;\n}\nasync function handleAnalyticsQueryIntelligently(question, context, userIntent) {\n    // Enhanced analytics query handling with intelligence\n    const response = await handleAnalyticsQuery(question, context);\n    // Add intelligent context based on user intent\n    if (userIntent?.intents.includes(\"comparingOptions\")) {\n        response.answer += `\\n\\n**Comparison Insight:** I can help you compare your performance against industry benchmarks and identify specific areas where you're excelling or need improvement.`;\n    }\n    if (userIntent?.intents.includes(\"seekingValidation\")) {\n        response.answer += `\\n\\n**Validation Check:** Your current performance shows you're on the right track. The key is maintaining consistency and addressing any gaps systematically.`;\n    }\n    return response;\n}\nasync function handleGeneralQueryIntelligently(question, context, userIntent) {\n    // Enhanced general query handling with intelligence\n    const response = await handleGeneralQuery(question, context);\n    // Add intelligent context based on user intent\n    if (userIntent?.intents.includes(\"requestingGuidance\")) {\n        response.answer += `\\n\\n**Personalized Guidance:** Based on your questions, I can see you're interested in compliance. Let me know your specific area of focus, and I'll provide tailored guidance.`;\n    }\n    if (userIntent?.isFollowUp) {\n        response.answer += `\\n\\n**Building on our conversation:** I'm here to help you dive deeper into any topic. What specific aspect would you like to explore further?`;\n    }\n    return response;\n}\nasync function handleRegulatoryQuery(question, context) {\n    // Search regulatory intelligence database\n    const regulatoryData = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.regulatoryIntelligence.findMany({\n        where: {\n            status: \"active\",\n            OR: [\n                {\n                    title: {\n                        contains: question,\n                        mode: \"insensitive\"\n                    }\n                },\n                {\n                    content: {\n                        contains: question,\n                        mode: \"insensitive\"\n                    }\n                },\n                {\n                    source: {\n                        contains: question,\n                        mode: \"insensitive\"\n                    }\n                }\n            ]\n        },\n        orderBy: {\n            lastUpdated: \"desc\"\n        },\n        take: 5\n    });\n    // Search guidance content for regulatory citations\n    const guidanceData = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.guidanceContent.findMany({\n        where: {\n            OR: [\n                {\n                    title: {\n                        contains: question,\n                        mode: \"insensitive\"\n                    }\n                },\n                {\n                    description: {\n                        contains: question,\n                        mode: \"insensitive\"\n                    }\n                },\n                {\n                    regulatoryCitations: {\n                        has: question\n                    }\n                }\n            ]\n        },\n        include: {\n            question: {\n                include: {\n                    section: true\n                }\n            }\n        },\n        take: 3\n    });\n    const sources = [\n        ...regulatoryData.map((reg)=>({\n                type: \"regulation\",\n                title: reg.title,\n                content: reg.content.substring(0, 300) + \"...\",\n                url: `/regulatory/${reg.id}`\n            })),\n        ...guidanceData.map((guidance)=>({\n                type: \"guidance\",\n                title: guidance.title,\n                content: guidance.description,\n                url: `/assessment/guidance/${guidance.id}`\n            }))\n    ];\n    // Generate intelligent response\n    const answer = generateRegulatoryResponse(question, regulatoryData, guidanceData);\n    const actionItems = extractActionItems(regulatoryData, guidanceData);\n    const impactLevel = determineImpactLevel(regulatoryData);\n    return {\n        answer,\n        category: \"regulatory\",\n        sources,\n        actionItems,\n        impactLevel,\n        relatedQuestions: generateRelatedQuestions(\"regulatory\", question)\n    };\n}\nasync function handleAssessmentQuery(question, context) {\n    // Search assessment questions and guidance\n    const questions = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.dynamicQuestion.findMany({\n        where: {\n            OR: [\n                {\n                    questionText: {\n                        contains: question,\n                        mode: \"insensitive\"\n                    }\n                },\n                {\n                    responsibleRoles: {\n                        has: question\n                    }\n                },\n                {\n                    evidenceRequired: {\n                        has: question\n                    }\n                }\n            ]\n        },\n        include: {\n            section: true,\n            guidanceContent: true\n        },\n        take: 5\n    });\n    const sources = questions.map((q)=>({\n            type: \"assessment\",\n            title: q.questionText.substring(0, 100) + \"...\",\n            content: q.guidanceContent[0]?.description || \"Assessment question guidance\",\n            url: `/assessment/question/${q.id}`\n        }));\n    const answer = generateAssessmentResponse(question, questions);\n    const actionItems = extractAssessmentActionItems(questions);\n    const impactLevel = questions.some((q)=>q.isProductionBlocker) ? \"critical\" : \"medium\";\n    return {\n        answer,\n        category: \"assessment\",\n        sources,\n        actionItems,\n        impactLevel,\n        relatedQuestions: generateRelatedQuestions(\"assessment\", question)\n    };\n}\nasync function handleAnalyticsQuery(question, context) {\n    // Get analytics data based on context\n    const assessments = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.assessment.findMany({\n        where: context?.companyId ? {\n            tenantId: context.companyId\n        } : {},\n        include: {\n            tenant: true,\n            responses: {\n                include: {\n                    question: {\n                        include: {\n                            section: true\n                        }\n                    }\n                }\n            }\n        },\n        orderBy: {\n            updatedAt: \"desc\"\n        },\n        take: 10\n    });\n    const analyticsData = calculateAnalyticsMetrics(assessments);\n    const sources = [\n        {\n            type: \"analytics\",\n            title: \"Assessment Analytics Dashboard\",\n            content: `Performance metrics for ${assessments.length} assessments`,\n            url: \"/analytics\"\n        }\n    ];\n    const answer = generateAnalyticsResponse(question, analyticsData);\n    const actionItems = generateAnalyticsRecommendations(analyticsData);\n    const impactLevel = \"medium\";\n    return {\n        answer,\n        category: \"analytics\",\n        sources,\n        actionItems,\n        impactLevel,\n        relatedQuestions: generateRelatedQuestions(\"analytics\", question)\n    };\n}\nasync function handleGeneralQuery(question, context) {\n    return {\n        answer: `I'm AskRexi, your regulatory compliance assistant. I can help you with regulatory intelligence, assessment guidance, and analytics insights. Could you please be more specific about what you'd like to know?`,\n        category: \"general\",\n        sources: [],\n        actionItems: [\n            \"Ask about specific FDA or EMA regulations\",\n            \"Get guidance on assessment questions\",\n            \"Request analytics and performance insights\",\n            \"Learn about compliance requirements\"\n        ],\n        impactLevel: \"low\",\n        relatedQuestions: [\n            \"What are the latest FDA guidelines for AI in healthcare?\",\n            \"How do I complete the data governance assessment section?\",\n            \"What is our current compliance score?\",\n            \"What regulations apply to our therapeutic area?\"\n        ]\n    };\n}\n// Helper functions\nfunction generateRegulatoryResponse(question, regulatoryData, guidanceData) {\n    if (regulatoryData.length === 0 && guidanceData.length === 0) {\n        return `I couldn't find specific regulatory information for \"${question}\". However, I can help you with general regulatory guidance. Please try asking about specific regulations like FDA guidelines, EMA requirements, or ICH standards.`;\n    }\n    let response = `Based on your question about \"${question}\", here's what I found:\\n\\n`;\n    if (regulatoryData.length > 0) {\n        response += `**Regulatory Information:**\\n`;\n        regulatoryData.forEach((reg, index)=>{\n            response += `• **${reg.title}** (${reg.source})\\n`;\n            response += `  - Impact Level: ${reg.impactLevel}\\n`;\n            response += `  - Effective Date: ${reg.effectiveDate ? new Date(reg.effectiveDate).toLocaleDateString() : \"TBD\"}\\n`;\n            response += `  - Therapeutic Areas: ${reg.therapeuticAreas.join(\", \")}\\n\\n`;\n        });\n    }\n    if (guidanceData.length > 0) {\n        response += `**Assessment Guidance:**\\n`;\n        guidanceData.forEach((guidance, index)=>{\n            response += `• ${guidance.title}\\n`;\n            response += `  - Section: ${guidance.question.section.title}\\n`;\n            response += `  - Description: ${guidance.description}\\n\\n`;\n        });\n    }\n    return response;\n}\nfunction generateAssessmentResponse(question, questions) {\n    if (questions.length === 0) {\n        return `I couldn't find specific assessment guidance for \"${question}\". Please try asking about specific assessment sections, questions, or requirements.`;\n    }\n    let response = `Here's guidance for your assessment question:\\n\\n`;\n    questions.forEach((q, index)=>{\n        response += `**${q.questionText.substring(0, 100)}...**\\n`;\n        response += `• Section: ${q.section.title}\\n`;\n        response += `• Responsible Roles: ${q.responsibleRoles.join(\", \")}\\n`;\n        response += `• Evidence Required: ${q.evidenceRequired.join(\", \")}\\n`;\n        if (q.isProductionBlocker) {\n            response += `• ⚠️ **Production Blocker** - Must be completed for production readiness\\n`;\n        }\n        if (q.guidanceContent.length > 0) {\n            response += `• Guidance: ${q.guidanceContent[0].description}\\n`;\n        }\n        response += `\\n`;\n    });\n    return response;\n}\nfunction generateAnalyticsResponse(question, analyticsData) {\n    return `Here are your analytics insights:\\n\\n` + `• **Total Assessments**: ${analyticsData.totalAssessments}\\n` + `• **Average Score**: ${analyticsData.averageScore}%\\n` + `• **Completion Rate**: ${analyticsData.completionRate}%\\n` + `• **Production Ready**: ${analyticsData.productionReady}%\\n\\n` + `**Key Trends:**\\n` + `• Most challenging sections: ${analyticsData.challengingSections.join(\", \")}\\n` + `• Top performing areas: ${analyticsData.topAreas.join(\", \")}\\n`;\n}\nfunction extractActionItems(regulatoryData, guidanceData) {\n    const actionItems = [];\n    regulatoryData.forEach((reg)=>{\n        if (reg.impactLevel === \"high\" || reg.impactLevel === \"critical\") {\n            actionItems.push(`Review and implement ${reg.title} requirements`);\n        }\n    });\n    guidanceData.forEach((guidance)=>{\n        if (guidance.actionSteps && guidance.actionSteps.length > 0) {\n            actionItems.push(...guidance.actionSteps);\n        }\n    });\n    return [\n        ...new Set(actionItems)\n    ]; // Remove duplicates\n}\nfunction extractAssessmentActionItems(questions) {\n    const actionItems = [];\n    questions.forEach((q)=>{\n        if (q.evidenceRequired.length > 0) {\n            actionItems.push(`Gather evidence: ${q.evidenceRequired.join(\", \")}`);\n        }\n        if (q.isProductionBlocker) {\n            actionItems.push(`Complete this production blocker question immediately`);\n        }\n        if (q.guidanceContent.length > 0 && q.guidanceContent[0].actionSteps) {\n            actionItems.push(...q.guidanceContent[0].actionSteps);\n        }\n    });\n    return [\n        ...new Set(actionItems)\n    ];\n}\nfunction generateAnalyticsRecommendations(analyticsData) {\n    const recommendations = [];\n    if (analyticsData.averageScore < 70) {\n        recommendations.push(\"Focus on improving overall compliance score\");\n    }\n    if (analyticsData.completionRate < 80) {\n        recommendations.push(\"Increase assessment completion rates\");\n    }\n    if (analyticsData.productionReady < 60) {\n        recommendations.push(\"Address production blockers to improve readiness\");\n    }\n    return recommendations;\n}\nfunction determineImpactLevel(regulatoryData) {\n    if (regulatoryData.some((reg)=>reg.impactLevel === \"critical\")) return \"critical\";\n    if (regulatoryData.some((reg)=>reg.impactLevel === \"high\")) return \"high\";\n    if (regulatoryData.some((reg)=>reg.impactLevel === \"medium\")) return \"medium\";\n    return \"low\";\n}\nfunction calculateAnalyticsMetrics(assessments) {\n    const totalAssessments = assessments.length;\n    const completedAssessments = assessments.filter((a)=>a.status === \"completed\").length;\n    const averageScore = totalAssessments > 0 ? Math.round(assessments.reduce((sum, a)=>sum + a.currentScore, 0) / totalAssessments) : 0;\n    const completionRate = totalAssessments > 0 ? Math.round(completedAssessments / totalAssessments * 100) : 0;\n    const productionReady = totalAssessments > 0 ? Math.round(assessments.filter((a)=>a.currentScore >= 80).length / totalAssessments * 100) : 0;\n    return {\n        totalAssessments,\n        completedAssessments,\n        averageScore,\n        completionRate,\n        productionReady,\n        challengingSections: [\n            \"Data Governance\",\n            \"Model Validation\"\n        ],\n        topAreas: [\n            \"Documentation\",\n            \"Risk Management\"\n        ]\n    };\n}\nfunction generateRelatedQuestions(category, originalQuestion) {\n    const questionMap = {\n        regulatory: [\n            \"What are the latest FDA guidelines for AI in healthcare?\",\n            \"How do EMA regulations affect our therapeutic area?\",\n            \"What are the ICH requirements for clinical trials?\",\n            \"What is the impact of new GCP guidelines?\"\n        ],\n        assessment: [\n            \"How do I complete the data governance section?\",\n            \"What evidence is required for model validation?\",\n            \"Which sections are production blockers?\",\n            \"How do I validate our AI model performance?\"\n        ],\n        analytics: [\n            \"What is our current compliance score?\",\n            \"How are we performing compared to industry benchmarks?\",\n            \"What are our biggest compliance gaps?\",\n            \"Which sections need the most attention?\"\n        ],\n        general: [\n            \"What can AskRexi help me with?\",\n            \"How do I get started with compliance assessments?\",\n            \"What regulations apply to our company?\",\n            \"How do I access our analytics dashboard?\"\n        ]\n    };\n    return questionMap[category] || questionMap.general;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/askrexi/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/prisma.ts":
/*!***************************!*\
  !*** ./src/lib/prisma.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nif (true) globalForPrisma.prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3ByaXNtYS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNkM7QUFFN0MsTUFBTUMsa0JBQWtCQztBQUlqQixNQUFNQyxTQUFTRixnQkFBZ0JFLE1BQU0sSUFBSSxJQUFJSCx3REFBWUEsR0FBRTtBQUVsRSxJQUFJSSxJQUF5QixFQUFjSCxnQkFBZ0JFLE1BQU0sR0FBR0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21wbGlhbmNlLWlxLy4vc3JjL2xpYi9wcmlzbWEudHM/MDFkNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcmlzbWFDbGllbnQgfSBmcm9tICdAcHJpc21hL2NsaWVudCdcblxuY29uc3QgZ2xvYmFsRm9yUHJpc21hID0gZ2xvYmFsVGhpcyBhcyB1bmtub3duIGFzIHtcbiAgcHJpc21hOiBQcmlzbWFDbGllbnQgfCB1bmRlZmluZWRcbn1cblxuZXhwb3J0IGNvbnN0IHByaXNtYSA9IGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPz8gbmV3IFByaXNtYUNsaWVudCgpXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSBnbG9iYWxGb3JQcmlzbWEucHJpc21hID0gcHJpc21hXG4iXSwibmFtZXMiOlsiUHJpc21hQ2xpZW50IiwiZ2xvYmFsRm9yUHJpc21hIiwiZ2xvYmFsVGhpcyIsInByaXNtYSIsInByb2Nlc3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/prisma.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Faskrexi%2Froute&page=%2Fapi%2Faskrexi%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Faskrexi%2Froute.ts&appDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();