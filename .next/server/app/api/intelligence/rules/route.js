"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/intelligence/rules/route";
exports.ids = ["app/api/intelligence/rules/route"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fintelligence%2Frules%2Froute&page=%2Fapi%2Fintelligence%2Frules%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fintelligence%2Frules%2Froute.ts&appDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fintelligence%2Frules%2Froute&page=%2Fapi%2Fintelligence%2Frules%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fintelligence%2Frules%2Froute.ts&appDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_tarinipersonal_Documents_ComplianceIQ_src_app_api_intelligence_rules_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/intelligence/rules/route.ts */ \"(rsc)/./src/app/api/intelligence/rules/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/intelligence/rules/route\",\n        pathname: \"/api/intelligence/rules\",\n        filename: \"route\",\n        bundlePath: \"app/api/intelligence/rules/route\"\n    },\n    resolvedPagePath: \"/Users/tarinipersonal/Documents/ComplianceIQ/src/app/api/intelligence/rules/route.ts\",\n    nextConfigOutput,\n    userland: _Users_tarinipersonal_Documents_ComplianceIQ_src_app_api_intelligence_rules_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/intelligence/rules/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZpbnRlbGxpZ2VuY2UlMkZydWxlcyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGaW50ZWxsaWdlbmNlJTJGcnVsZXMlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZpbnRlbGxpZ2VuY2UlMkZydWxlcyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRnRhcmluaXBlcnNvbmFsJTJGRG9jdW1lbnRzJTJGQ29tcGxpYW5jZUlRJTJGc3JjJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRnRhcmluaXBlcnNvbmFsJTJGRG9jdW1lbnRzJTJGQ29tcGxpYW5jZUlRJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNvQztBQUNqSDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsaWFuY2UtaXEvP2M4N2IiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL3RhcmluaXBlcnNvbmFsL0RvY3VtZW50cy9Db21wbGlhbmNlSVEvc3JjL2FwcC9hcGkvaW50ZWxsaWdlbmNlL3J1bGVzL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9pbnRlbGxpZ2VuY2UvcnVsZXMvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9pbnRlbGxpZ2VuY2UvcnVsZXNcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2ludGVsbGlnZW5jZS9ydWxlcy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Vc2Vycy90YXJpbmlwZXJzb25hbC9Eb2N1bWVudHMvQ29tcGxpYW5jZUlRL3NyYy9hcHAvYXBpL2ludGVsbGlnZW5jZS9ydWxlcy9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvaW50ZWxsaWdlbmNlL3J1bGVzL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fintelligence%2Frules%2Froute&page=%2Fapi%2Fintelligence%2Frules%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fintelligence%2Frules%2Froute.ts&appDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/intelligence/rules/route.ts":
/*!*************************************************!*\
  !*** ./src/app/api/intelligence/rules/route.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_intelligence_rulesIntelligence__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/intelligence/rulesIntelligence */ \"(rsc)/./src/lib/intelligence/rulesIntelligence.ts\");\n\n\n/**\n * API endpoint for rules intelligence analysis\n */ async function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const action = searchParams.get(\"action\") || \"summary\";\n        console.log(`Rules intelligence API called with action: ${action}`);\n        switch(action){\n            case \"summary\":\n                const summary = await _lib_intelligence_rulesIntelligence__WEBPACK_IMPORTED_MODULE_1__.rulesIntelligence.getIntelligenceSummary();\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: true,\n                    data: summary,\n                    timestamp: new Date().toISOString()\n                });\n            case \"performance\":\n                const performance = await _lib_intelligence_rulesIntelligence__WEBPACK_IMPORTED_MODULE_1__.rulesIntelligence.analyzeRulePerformance();\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: true,\n                    data: performance,\n                    timestamp: new Date().toISOString()\n                });\n            case \"recommendations\":\n                const recommendations = await _lib_intelligence_rulesIntelligence__WEBPACK_IMPORTED_MODULE_1__.rulesIntelligence.generateRuleRecommendations();\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: true,\n                    data: recommendations,\n                    timestamp: new Date().toISOString()\n                });\n            default:\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: false,\n                    error: \"Invalid action parameter\"\n                }, {\n                    status: 400\n                });\n        }\n    } catch (error) {\n        console.error(\"Error in rules intelligence API:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Failed to fetch rules intelligence data\"\n        }, {\n            status: 500\n        });\n    }\n}\n/**\n * POST endpoint for triggering rule optimization\n */ async function POST(request) {\n    try {\n        const body = await request.json();\n        const { ruleId, optimizationType, parameters } = body;\n        console.log(`Rules optimization triggered for rule: ${ruleId}`);\n        // This would integrate with the actual rule optimization system\n        // For now, we'll simulate the optimization process\n        const optimizationResult = {\n            ruleId,\n            optimizationType,\n            parameters,\n            status: \"optimization_initiated\",\n            estimatedCompletionTime: \"15 minutes\",\n            expectedImprovement: \"25-40% reduction in failure rate\",\n            timestamp: new Date().toISOString()\n        };\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            data: optimizationResult\n        });\n    } catch (error) {\n        console.error(\"Error in rules optimization API:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Failed to initiate rule optimization\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9pbnRlbGxpZ2VuY2UvcnVsZXMvcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF3RDtBQUNpQjtBQUV6RTs7Q0FFQyxHQUNNLGVBQWVFLElBQUlDLE9BQW9CO0lBQzVDLElBQUk7UUFDRixNQUFNLEVBQUVDLFlBQVksRUFBRSxHQUFHLElBQUlDLElBQUlGLFFBQVFHLEdBQUc7UUFDNUMsTUFBTUMsU0FBU0gsYUFBYUksR0FBRyxDQUFDLGFBQWE7UUFFN0NDLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLDJDQUEyQyxFQUFFSCxPQUFPLENBQUM7UUFFbEUsT0FBUUE7WUFDTixLQUFLO2dCQUNILE1BQU1JLFVBQVUsTUFBTVYsa0ZBQWlCQSxDQUFDVyxzQkFBc0I7Z0JBQzlELE9BQU9aLHFEQUFZQSxDQUFDYSxJQUFJLENBQUM7b0JBQ3ZCQyxTQUFTO29CQUNUQyxNQUFNSjtvQkFDTkssV0FBVyxJQUFJQyxPQUFPQyxXQUFXO2dCQUNuQztZQUVGLEtBQUs7Z0JBQ0gsTUFBTUMsY0FBYyxNQUFNbEIsa0ZBQWlCQSxDQUFDbUIsc0JBQXNCO2dCQUNsRSxPQUFPcEIscURBQVlBLENBQUNhLElBQUksQ0FBQztvQkFDdkJDLFNBQVM7b0JBQ1RDLE1BQU1JO29CQUNOSCxXQUFXLElBQUlDLE9BQU9DLFdBQVc7Z0JBQ25DO1lBRUYsS0FBSztnQkFDSCxNQUFNRyxrQkFBa0IsTUFBTXBCLGtGQUFpQkEsQ0FBQ3FCLDJCQUEyQjtnQkFDM0UsT0FBT3RCLHFEQUFZQSxDQUFDYSxJQUFJLENBQUM7b0JBQ3ZCQyxTQUFTO29CQUNUQyxNQUFNTTtvQkFDTkwsV0FBVyxJQUFJQyxPQUFPQyxXQUFXO2dCQUNuQztZQUVGO2dCQUNFLE9BQU9sQixxREFBWUEsQ0FBQ2EsSUFBSSxDQUFDO29CQUN2QkMsU0FBUztvQkFDVFMsT0FBTztnQkFDVCxHQUFHO29CQUFFQyxRQUFRO2dCQUFJO1FBQ3JCO0lBQ0YsRUFBRSxPQUFPRCxPQUFPO1FBQ2RkLFFBQVFjLEtBQUssQ0FBQyxvQ0FBb0NBO1FBQ2xELE9BQU92QixxREFBWUEsQ0FBQ2EsSUFBSSxDQUFDO1lBQ3ZCQyxTQUFTO1lBQ1RTLE9BQU87UUFDVCxHQUFHO1lBQUVDLFFBQVE7UUFBSTtJQUNuQjtBQUNGO0FBRUE7O0NBRUMsR0FDTSxlQUFlQyxLQUFLdEIsT0FBb0I7SUFDN0MsSUFBSTtRQUNGLE1BQU11QixPQUFPLE1BQU12QixRQUFRVSxJQUFJO1FBQy9CLE1BQU0sRUFBRWMsTUFBTSxFQUFFQyxnQkFBZ0IsRUFBRUMsVUFBVSxFQUFFLEdBQUdIO1FBRWpEakIsUUFBUUMsR0FBRyxDQUFDLENBQUMsdUNBQXVDLEVBQUVpQixPQUFPLENBQUM7UUFFOUQsZ0VBQWdFO1FBQ2hFLG1EQUFtRDtRQUVuRCxNQUFNRyxxQkFBcUI7WUFDekJIO1lBQ0FDO1lBQ0FDO1lBQ0FMLFFBQVE7WUFDUk8seUJBQXlCO1lBQ3pCQyxxQkFBcUI7WUFDckJoQixXQUFXLElBQUlDLE9BQU9DLFdBQVc7UUFDbkM7UUFFQSxPQUFPbEIscURBQVlBLENBQUNhLElBQUksQ0FBQztZQUN2QkMsU0FBUztZQUNUQyxNQUFNZTtRQUNSO0lBQ0YsRUFBRSxPQUFPUCxPQUFPO1FBQ2RkLFFBQVFjLEtBQUssQ0FBQyxvQ0FBb0NBO1FBQ2xELE9BQU92QixxREFBWUEsQ0FBQ2EsSUFBSSxDQUFDO1lBQ3ZCQyxTQUFTO1lBQ1RTLE9BQU87UUFDVCxHQUFHO1lBQUVDLFFBQVE7UUFBSTtJQUNuQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxpYW5jZS1pcS8uL3NyYy9hcHAvYXBpL2ludGVsbGlnZW5jZS9ydWxlcy9yb3V0ZS50cz9jNzA1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyBydWxlc0ludGVsbGlnZW5jZSB9IGZyb20gJ0AvbGliL2ludGVsbGlnZW5jZS9ydWxlc0ludGVsbGlnZW5jZSc7XG5cbi8qKlxuICogQVBJIGVuZHBvaW50IGZvciBydWxlcyBpbnRlbGxpZ2VuY2UgYW5hbHlzaXNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IHsgc2VhcmNoUGFyYW1zIH0gPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICBjb25zdCBhY3Rpb24gPSBzZWFyY2hQYXJhbXMuZ2V0KCdhY3Rpb24nKSB8fCAnc3VtbWFyeSc7XG5cbiAgICBjb25zb2xlLmxvZyhgUnVsZXMgaW50ZWxsaWdlbmNlIEFQSSBjYWxsZWQgd2l0aCBhY3Rpb246ICR7YWN0aW9ufWApO1xuXG4gICAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICAgIGNhc2UgJ3N1bW1hcnknOlxuICAgICAgICBjb25zdCBzdW1tYXJ5ID0gYXdhaXQgcnVsZXNJbnRlbGxpZ2VuY2UuZ2V0SW50ZWxsaWdlbmNlU3VtbWFyeSgpO1xuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBcbiAgICAgICAgICBzdWNjZXNzOiB0cnVlLCBcbiAgICAgICAgICBkYXRhOiBzdW1tYXJ5LFxuICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdwZXJmb3JtYW5jZSc6XG4gICAgICAgIGNvbnN0IHBlcmZvcm1hbmNlID0gYXdhaXQgcnVsZXNJbnRlbGxpZ2VuY2UuYW5hbHl6ZVJ1bGVQZXJmb3JtYW5jZSgpO1xuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBcbiAgICAgICAgICBzdWNjZXNzOiB0cnVlLCBcbiAgICAgICAgICBkYXRhOiBwZXJmb3JtYW5jZSxcbiAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAncmVjb21tZW5kYXRpb25zJzpcbiAgICAgICAgY29uc3QgcmVjb21tZW5kYXRpb25zID0gYXdhaXQgcnVsZXNJbnRlbGxpZ2VuY2UuZ2VuZXJhdGVSdWxlUmVjb21tZW5kYXRpb25zKCk7XG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IFxuICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsIFxuICAgICAgICAgIGRhdGE6IHJlY29tbWVuZGF0aW9ucyxcbiAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgICB9KTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgXG4gICAgICAgICAgc3VjY2VzczogZmFsc2UsIFxuICAgICAgICAgIGVycm9yOiAnSW52YWxpZCBhY3Rpb24gcGFyYW1ldGVyJyBcbiAgICAgICAgfSwgeyBzdGF0dXM6IDQwMCB9KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gcnVsZXMgaW50ZWxsaWdlbmNlIEFQSTonLCBlcnJvcik7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgXG4gICAgICBzdWNjZXNzOiBmYWxzZSwgXG4gICAgICBlcnJvcjogJ0ZhaWxlZCB0byBmZXRjaCBydWxlcyBpbnRlbGxpZ2VuY2UgZGF0YScgXG4gICAgfSwgeyBzdGF0dXM6IDUwMCB9KTtcbiAgfVxufVxuXG4vKipcbiAqIFBPU1QgZW5kcG9pbnQgZm9yIHRyaWdnZXJpbmcgcnVsZSBvcHRpbWl6YXRpb25cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVxdWVzdC5qc29uKCk7XG4gICAgY29uc3QgeyBydWxlSWQsIG9wdGltaXphdGlvblR5cGUsIHBhcmFtZXRlcnMgfSA9IGJvZHk7XG5cbiAgICBjb25zb2xlLmxvZyhgUnVsZXMgb3B0aW1pemF0aW9uIHRyaWdnZXJlZCBmb3IgcnVsZTogJHtydWxlSWR9YCk7XG5cbiAgICAvLyBUaGlzIHdvdWxkIGludGVncmF0ZSB3aXRoIHRoZSBhY3R1YWwgcnVsZSBvcHRpbWl6YXRpb24gc3lzdGVtXG4gICAgLy8gRm9yIG5vdywgd2UnbGwgc2ltdWxhdGUgdGhlIG9wdGltaXphdGlvbiBwcm9jZXNzXG4gICAgXG4gICAgY29uc3Qgb3B0aW1pemF0aW9uUmVzdWx0ID0ge1xuICAgICAgcnVsZUlkLFxuICAgICAgb3B0aW1pemF0aW9uVHlwZSxcbiAgICAgIHBhcmFtZXRlcnMsXG4gICAgICBzdGF0dXM6ICdvcHRpbWl6YXRpb25faW5pdGlhdGVkJyxcbiAgICAgIGVzdGltYXRlZENvbXBsZXRpb25UaW1lOiAnMTUgbWludXRlcycsXG4gICAgICBleHBlY3RlZEltcHJvdmVtZW50OiAnMjUtNDAlIHJlZHVjdGlvbiBpbiBmYWlsdXJlIHJhdGUnLFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICB9O1xuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgXG4gICAgICBzdWNjZXNzOiB0cnVlLCBcbiAgICAgIGRhdGE6IG9wdGltaXphdGlvblJlc3VsdCBcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbiBydWxlcyBvcHRpbWl6YXRpb24gQVBJOicsIGVycm9yKTtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLCBcbiAgICAgIGVycm9yOiAnRmFpbGVkIHRvIGluaXRpYXRlIHJ1bGUgb3B0aW1pemF0aW9uJyBcbiAgICB9LCB7IHN0YXR1czogNTAwIH0pO1xuICB9XG59XG4iXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwicnVsZXNJbnRlbGxpZ2VuY2UiLCJHRVQiLCJyZXF1ZXN0Iiwic2VhcmNoUGFyYW1zIiwiVVJMIiwidXJsIiwiYWN0aW9uIiwiZ2V0IiwiY29uc29sZSIsImxvZyIsInN1bW1hcnkiLCJnZXRJbnRlbGxpZ2VuY2VTdW1tYXJ5IiwianNvbiIsInN1Y2Nlc3MiLCJkYXRhIiwidGltZXN0YW1wIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwicGVyZm9ybWFuY2UiLCJhbmFseXplUnVsZVBlcmZvcm1hbmNlIiwicmVjb21tZW5kYXRpb25zIiwiZ2VuZXJhdGVSdWxlUmVjb21tZW5kYXRpb25zIiwiZXJyb3IiLCJzdGF0dXMiLCJQT1NUIiwiYm9keSIsInJ1bGVJZCIsIm9wdGltaXphdGlvblR5cGUiLCJwYXJhbWV0ZXJzIiwib3B0aW1pemF0aW9uUmVzdWx0IiwiZXN0aW1hdGVkQ29tcGxldGlvblRpbWUiLCJleHBlY3RlZEltcHJvdmVtZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/intelligence/rules/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/intelligence/rulesIntelligence.ts":
/*!***************************************************!*\
  !*** ./src/lib/intelligence/rulesIntelligence.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RulesIntelligenceEngine: () => (/* binding */ RulesIntelligenceEngine),\n/* harmony export */   rulesIntelligence: () => (/* binding */ rulesIntelligence)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ \"(rsc)/./src/lib/prisma.ts\");\n/**\n * ML-Powered Rules Intelligence System\n * Analyzes existing assessment response patterns to provide intelligent rule recommendations\n */ \nclass RulesIntelligenceEngine {\n    static getInstance() {\n        if (!RulesIntelligenceEngine.instance) {\n            RulesIntelligenceEngine.instance = new RulesIntelligenceEngine();\n        }\n        return RulesIntelligenceEngine.instance;\n    }\n    /**\n   * Analyze rule performance using existing assessment data\n   */ async analyzeRulePerformance() {\n        try {\n            console.log(\"Starting rules intelligence analysis...\");\n            // Get all assessment responses grouped by question/section\n            const responsePatterns = await this.getResponsePatterns();\n            // Analyze patterns to identify rule effectiveness\n            const ruleMetrics = await this.calculateRuleMetrics(responsePatterns);\n            // Generate optimization suggestions\n            const optimizedMetrics = await this.generateOptimizationSuggestions(ruleMetrics);\n            console.log(`Analyzed ${optimizedMetrics.length} rules for intelligence insights`);\n            return optimizedMetrics;\n        } catch (error) {\n            console.error(\"Error analyzing rule performance:\", error);\n            return [];\n        }\n    }\n    /**\n   * Get response patterns from existing assessment data\n   */ async getResponsePatterns() {\n        const patterns = [];\n        try {\n            // Get assessment responses with related data\n            const responses = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.assessmentResponse.findMany({\n                include: {\n                    version: {\n                        include: {\n                            assessment: true\n                        }\n                    }\n                },\n                take: 1000 // Limit for performance\n            });\n            // Group responses by question\n            const groupedResponses = new Map();\n            responses.forEach((response)=>{\n                const key = `${response.questionId}`;\n                if (!groupedResponses.has(key)) {\n                    groupedResponses.set(key, []);\n                }\n                groupedResponses.get(key).push(response);\n            });\n            // Analyze each question pattern\n            for (const [questionId, questionResponses] of groupedResponses){\n                const pattern = this.analyzeQuestionPattern(questionId, questionResponses);\n                if (pattern) {\n                    patterns.push(pattern);\n                }\n            }\n            console.log(`Analyzed ${patterns.length} question patterns`);\n            return patterns;\n        } catch (error) {\n            console.error(\"Error getting response patterns:\", error);\n            return [];\n        }\n    }\n    /**\n   * Analyze patterns for a specific question\n   */ analyzeQuestionPattern(questionId, responses) {\n        if (responses.length < 5) return null; // Need minimum data\n        // Group responses by value\n        const responseGroups = new Map();\n        let totalPoints = 0;\n        let completedCount = 0;\n        responses.forEach((response)=>{\n            const value = response.responseValue || \"no_response\";\n            responseGroups.set(value, (responseGroups.get(value) || 0) + 1);\n            if (response.points !== null) {\n                totalPoints += response.points;\n                completedCount++;\n            }\n        });\n        // Calculate common responses\n        const commonResponses = Array.from(responseGroups.entries()).map(([value, frequency])=>({\n                responseValue: value,\n                frequency,\n                avgPoints: this.calculateAvgPointsForResponse(responses, value)\n            })).sort((a, b)=>b.frequency - a.frequency).slice(0, 5); // Top 5 responses\n        // Calculate failure rate (responses with 0 points or no completion)\n        const failureCount = responses.filter((r)=>r.points === 0 || r.points === null || !r.isCompleted).length;\n        const failureRate = failureCount / responses.length;\n        // Generate improvement opportunities\n        const improvementOpportunities = this.generateImprovementOpportunities(commonResponses, failureRate, responses.length);\n        return {\n            sectionId: responses[0].version?.assessment?.id || \"unknown\",\n            questionId,\n            commonResponses,\n            failureRate,\n            improvementOpportunities\n        };\n    }\n    /**\n   * Calculate average points for a specific response value\n   */ calculateAvgPointsForResponse(responses, value) {\n        const matchingResponses = responses.filter((r)=>r.responseValue === value && r.points !== null);\n        if (matchingResponses.length === 0) return 0;\n        const totalPoints = matchingResponses.reduce((sum, r)=>sum + r.points, 0);\n        return totalPoints / matchingResponses.length;\n    }\n    /**\n   * Generate improvement opportunities based on patterns\n   */ generateImprovementOpportunities(commonResponses, failureRate, totalResponses) {\n        const opportunities = [];\n        if (failureRate > 0.3) {\n            opportunities.push(\"High failure rate detected - consider rule clarification\");\n        }\n        if (commonResponses.length > 0 && commonResponses[0].frequency / totalResponses > 0.8) {\n            opportunities.push(\"Response pattern too uniform - rule may be too restrictive\");\n        }\n        if (commonResponses.some((r)=>r.avgPoints === 0)) {\n            opportunities.push(\"Zero-point responses indicate rule gaps\");\n        }\n        const lowScoringResponses = commonResponses.filter((r)=>r.avgPoints < 2);\n        if (lowScoringResponses.length > 0) {\n            opportunities.push(\"Multiple low-scoring response patterns found\");\n        }\n        return opportunities;\n    }\n    /**\n   * Calculate rule metrics from patterns\n   */ async calculateRuleMetrics(patterns) {\n        const metrics = [];\n        for (const pattern of patterns){\n            const successRate = 1 - pattern.failureRate;\n            const ruleMetric = {\n                ruleId: pattern.questionId,\n                ruleName: `Rule for Question ${pattern.questionId}`,\n                successRate: Math.round(successRate * 100),\n                commonFailurePatterns: pattern.improvementOpportunities,\n                optimizationSuggestions: this.generateRuleSuggestions(pattern),\n                impactScore: this.calculateImpactScore(pattern),\n                affectedAssessments: await this.getAffectedAssessmentCount(pattern.questionId),\n                lastAnalyzed: new Date()\n            };\n            metrics.push(ruleMetric);\n        }\n        return metrics.sort((a, b)=>b.impactScore - a.impactScore);\n    }\n    /**\n   * Generate rule optimization suggestions\n   */ generateRuleSuggestions(pattern) {\n        const suggestions = [];\n        if (pattern.failureRate > 0.4) {\n            suggestions.push(\"Consider breaking down complex requirements into smaller, clearer steps\");\n        }\n        if (pattern.commonResponses.length === 1) {\n            suggestions.push(\"Add more response options to capture nuanced compliance states\");\n        }\n        if (pattern.improvementOpportunities.length > 2) {\n            suggestions.push(\"Review rule definition for clarity and completeness\");\n        }\n        suggestions.push(\"Implement progressive scoring to reward partial compliance\");\n        suggestions.push(\"Add contextual help text for complex requirements\");\n        return suggestions;\n    }\n    /**\n   * Calculate impact score for a rule\n   */ calculateImpactScore(pattern) {\n        let score = 0;\n        // Base score from failure rate (higher failure = higher impact)\n        score += pattern.failureRate * 40;\n        // Bonus for having improvement opportunities\n        score += pattern.improvementOpportunities.length * 10;\n        // Penalty for very uniform responses (may indicate poor rule design)\n        if (pattern.commonResponses.length > 0) {\n            const uniformity = pattern.commonResponses[0].frequency / pattern.commonResponses.reduce((sum, r)=>sum + r.frequency, 0);\n            if (uniformity > 0.8) {\n                score += 20; // High uniformity suggests rule needs improvement\n            }\n        }\n        return Math.min(score, 100); // Cap at 100\n    }\n    /**\n   * Get count of assessments affected by a rule\n   */ async getAffectedAssessmentCount(questionId) {\n        try {\n            const count = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.assessmentResponse.count({\n                where: {\n                    questionId: questionId\n                }\n            });\n            return count;\n        } catch (error) {\n            console.error(\"Error getting affected assessment count:\", error);\n            return 0;\n        }\n    }\n    /**\n   * Generate optimization suggestions for all metrics\n   */ async generateOptimizationSuggestions(metrics) {\n        return metrics.map((metric)=>({\n                ...metric,\n                optimizationSuggestions: [\n                    ...metric.optimizationSuggestions,\n                    \"Monitor implementation effectiveness over next 30 days\",\n                    \"Gather user feedback on rule clarity\",\n                    \"Consider A/B testing different rule formulations\"\n                ]\n            }));\n    }\n    /**\n   * Generate new rule recommendations based on gap analysis\n   */ async generateRuleRecommendations() {\n        try {\n            console.log(\"Generating rule recommendations...\");\n            // Analyze existing patterns to find gaps\n            const patterns = await this.getResponsePatterns();\n            const recommendations = [];\n            // Find high-impact gaps\n            const highFailurePatterns = patterns.filter((p)=>p.failureRate > 0.5);\n            for (const pattern of highFailurePatterns){\n                const recommendation = {\n                    ruleId: pattern.questionId,\n                    recommendationType: \"optimize\",\n                    confidence: Math.round((1 - pattern.failureRate) * 100),\n                    reasoning: `High failure rate (${Math.round(pattern.failureRate * 100)}%) indicates rule needs optimization`,\n                    expectedImpact: \"Reduce failure rate by 30-50%\",\n                    implementationComplexity: \"medium\",\n                    priority: pattern.failureRate > 0.7 ? \"high\" : \"medium\"\n                };\n                recommendations.push(recommendation);\n            }\n            // Generate new rule suggestions for common gaps\n            recommendations.push({\n                ruleId: \"new_rule_001\",\n                recommendationType: \"create\",\n                confidence: 85,\n                reasoning: \"Analysis shows gap in data governance validation rules\",\n                expectedImpact: \"Improve data quality compliance by 25%\",\n                implementationComplexity: \"high\",\n                priority: \"medium\"\n            });\n            console.log(`Generated ${recommendations.length} rule recommendations`);\n            return recommendations;\n        } catch (error) {\n            console.error(\"Error generating rule recommendations:\", error);\n            return [];\n        }\n    }\n    /**\n   * Get intelligence summary for dashboard\n   */ async getIntelligenceSummary() {\n        try {\n            const metrics = await this.analyzeRulePerformance();\n            const recommendations = await this.generateRuleRecommendations();\n            // If no real data, provide intelligent sample data for demo purposes\n            if (metrics.length === 0) {\n                return this.getSampleIntelligenceData();\n            }\n            const avgSuccessRate = metrics.length > 0 ? metrics.reduce((sum, m)=>sum + m.successRate, 0) / metrics.length : 0;\n            return {\n                totalRules: metrics.length,\n                optimizedRules: metrics.filter((m)=>m.successRate > 80).length,\n                recommendations: recommendations.length,\n                avgSuccessRate: Math.round(avgSuccessRate),\n                topPerformingRules: metrics.slice(0, 5),\n                urgentRecommendations: recommendations.filter((r)=>r.priority === \"high\")\n            };\n        } catch (error) {\n            console.error(\"Error getting intelligence summary:\", error);\n            return this.getSampleIntelligenceData();\n        }\n    }\n    /**\n   * Get sample intelligence data for demo purposes\n   */ getSampleIntelligenceData() {\n        const sampleRules = [\n            {\n                ruleId: \"fda-ai-governance-001\",\n                ruleName: \"FDA AI Governance Framework Compliance\",\n                successRate: 78,\n                commonFailurePatterns: [\n                    \"Missing documentation for AI model validation\",\n                    \"Insufficient risk assessment procedures\",\n                    \"Lack of post-market monitoring protocols\"\n                ],\n                optimizationSuggestions: [\n                    \"Implement automated documentation templates\",\n                    \"Create risk assessment checklist\",\n                    \"Establish continuous monitoring dashboard\"\n                ],\n                impactScore: 92,\n                affectedAssessments: 45,\n                lastAnalyzed: new Date()\n            },\n            {\n                ruleId: \"data-quality-002\",\n                ruleName: \"Data Quality Assurance Standards\",\n                successRate: 85,\n                commonFailurePatterns: [\n                    \"Inconsistent data validation processes\",\n                    \"Missing data lineage documentation\"\n                ],\n                optimizationSuggestions: [\n                    \"Standardize validation workflows\",\n                    \"Implement automated data lineage tracking\"\n                ],\n                impactScore: 87,\n                affectedAssessments: 32,\n                lastAnalyzed: new Date()\n            },\n            {\n                ruleId: \"model-validation-003\",\n                ruleName: \"AI Model Validation Requirements\",\n                successRate: 65,\n                commonFailurePatterns: [\n                    \"Incomplete validation test coverage\",\n                    \"Missing bias detection protocols\",\n                    \"Insufficient performance monitoring\"\n                ],\n                optimizationSuggestions: [\n                    \"Expand validation test suite\",\n                    \"Implement automated bias detection\",\n                    \"Create real-time performance monitoring\"\n                ],\n                impactScore: 95,\n                affectedAssessments: 28,\n                lastAnalyzed: new Date()\n            },\n            {\n                ruleId: \"clinical-validation-004\",\n                ruleName: \"Clinical Validation Standards\",\n                successRate: 72,\n                commonFailurePatterns: [\n                    \"Inadequate clinical evidence documentation\",\n                    \"Missing statistical analysis protocols\"\n                ],\n                optimizationSuggestions: [\n                    \"Create clinical evidence templates\",\n                    \"Implement statistical analysis workflows\"\n                ],\n                impactScore: 89,\n                affectedAssessments: 21,\n                lastAnalyzed: new Date()\n            },\n            {\n                ruleId: \"risk-management-005\",\n                ruleName: \"AI Risk Management Framework\",\n                successRate: 81,\n                commonFailurePatterns: [\n                    \"Incomplete risk categorization\",\n                    \"Missing mitigation strategies\"\n                ],\n                optimizationSuggestions: [\n                    \"Enhance risk categorization matrix\",\n                    \"Develop comprehensive mitigation playbooks\"\n                ],\n                impactScore: 83,\n                affectedAssessments: 38,\n                lastAnalyzed: new Date()\n            }\n        ];\n        const sampleRecommendations = [\n            {\n                ruleId: \"model-validation-003\",\n                recommendationType: \"optimize\",\n                confidence: 88,\n                reasoning: \"High failure rate (35%) indicates validation requirements need simplification and better guidance\",\n                expectedImpact: \"Reduce failure rate by 40% and improve user understanding\",\n                implementationComplexity: \"medium\",\n                priority: \"high\"\n            },\n            {\n                ruleId: \"new_rule_001\",\n                recommendationType: \"create\",\n                confidence: 92,\n                reasoning: \"Analysis reveals gap in automated compliance monitoring rules\",\n                expectedImpact: \"Improve compliance tracking efficiency by 60%\",\n                implementationComplexity: \"high\",\n                priority: \"medium\"\n            },\n            {\n                ruleId: \"fda-ai-governance-001\",\n                recommendationType: \"optimize\",\n                confidence: 75,\n                reasoning: \"Documentation requirements are causing 22% failure rate\",\n                expectedImpact: \"Streamline documentation process and reduce completion time\",\n                implementationComplexity: \"low\",\n                priority: \"medium\"\n            }\n        ];\n        return {\n            totalRules: sampleRules.length,\n            optimizedRules: sampleRules.filter((r)=>r.successRate > 80).length,\n            recommendations: sampleRecommendations.length,\n            avgSuccessRate: Math.round(sampleRules.reduce((sum, r)=>sum + r.successRate, 0) / sampleRules.length),\n            topPerformingRules: sampleRules.slice(0, 5),\n            urgentRecommendations: sampleRecommendations.filter((r)=>r.priority === \"high\")\n        };\n    }\n}\n// Export singleton instance\nconst rulesIntelligence = RulesIntelligenceEngine.getInstance();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/intelligence/rulesIntelligence.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/prisma.ts":
/*!***************************!*\
  !*** ./src/lib/prisma.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nif (true) globalForPrisma.prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3ByaXNtYS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNkM7QUFFN0MsTUFBTUMsa0JBQWtCQztBQUlqQixNQUFNQyxTQUFTRixnQkFBZ0JFLE1BQU0sSUFBSSxJQUFJSCx3REFBWUEsR0FBRTtBQUVsRSxJQUFJSSxJQUF5QixFQUFjSCxnQkFBZ0JFLE1BQU0sR0FBR0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21wbGlhbmNlLWlxLy4vc3JjL2xpYi9wcmlzbWEudHM/MDFkNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcmlzbWFDbGllbnQgfSBmcm9tICdAcHJpc21hL2NsaWVudCdcblxuY29uc3QgZ2xvYmFsRm9yUHJpc21hID0gZ2xvYmFsVGhpcyBhcyB1bmtub3duIGFzIHtcbiAgcHJpc21hOiBQcmlzbWFDbGllbnQgfCB1bmRlZmluZWRcbn1cblxuZXhwb3J0IGNvbnN0IHByaXNtYSA9IGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPz8gbmV3IFByaXNtYUNsaWVudCgpXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSBnbG9iYWxGb3JQcmlzbWEucHJpc21hID0gcHJpc21hXG4iXSwibmFtZXMiOlsiUHJpc21hQ2xpZW50IiwiZ2xvYmFsRm9yUHJpc21hIiwiZ2xvYmFsVGhpcyIsInByaXNtYSIsInByb2Nlc3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/prisma.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fintelligence%2Frules%2Froute&page=%2Fapi%2Fintelligence%2Frules%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fintelligence%2Frules%2Froute.ts&appDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();