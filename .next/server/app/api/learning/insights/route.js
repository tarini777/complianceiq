"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/learning/insights/route";
exports.ids = ["app/api/learning/insights/route"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Flearning%2Finsights%2Froute&page=%2Fapi%2Flearning%2Finsights%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Flearning%2Finsights%2Froute.ts&appDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Flearning%2Finsights%2Froute&page=%2Fapi%2Flearning%2Finsights%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Flearning%2Finsights%2Froute.ts&appDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_tarinipersonal_Documents_ComplianceIQ_src_app_api_learning_insights_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/learning/insights/route.ts */ \"(rsc)/./src/app/api/learning/insights/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/learning/insights/route\",\n        pathname: \"/api/learning/insights\",\n        filename: \"route\",\n        bundlePath: \"app/api/learning/insights/route\"\n    },\n    resolvedPagePath: \"/Users/tarinipersonal/Documents/ComplianceIQ/src/app/api/learning/insights/route.ts\",\n    nextConfigOutput,\n    userland: _Users_tarinipersonal_Documents_ComplianceIQ_src_app_api_learning_insights_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/learning/insights/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZsZWFybmluZyUyRmluc2lnaHRzJTJGcm91dGUmcGFnZT0lMkZhcGklMkZsZWFybmluZyUyRmluc2lnaHRzJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGbGVhcm5pbmclMkZpbnNpZ2h0cyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRnRhcmluaXBlcnNvbmFsJTJGRG9jdW1lbnRzJTJGQ29tcGxpYW5jZUlRJTJGc3JjJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRnRhcmluaXBlcnNvbmFsJTJGRG9jdW1lbnRzJTJGQ29tcGxpYW5jZUlRJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNtQztBQUNoSDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsaWFuY2UtaXEvPzc2YjMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL3RhcmluaXBlcnNvbmFsL0RvY3VtZW50cy9Db21wbGlhbmNlSVEvc3JjL2FwcC9hcGkvbGVhcm5pbmcvaW5zaWdodHMvcm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2xlYXJuaW5nL2luc2lnaHRzL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvbGVhcm5pbmcvaW5zaWdodHNcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2xlYXJuaW5nL2luc2lnaHRzL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL1VzZXJzL3RhcmluaXBlcnNvbmFsL0RvY3VtZW50cy9Db21wbGlhbmNlSVEvc3JjL2FwcC9hcGkvbGVhcm5pbmcvaW5zaWdodHMvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2xlYXJuaW5nL2luc2lnaHRzL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Flearning%2Finsights%2Froute&page=%2Fapi%2Flearning%2Finsights%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Flearning%2Finsights%2Froute.ts&appDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/learning/insights/route.ts":
/*!************************************************!*\
  !*** ./src/app/api/learning/insights/route.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   dynamic: () => (/* binding */ dynamic)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_learning_continuousLearningEngine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/learning/continuousLearningEngine */ \"(rsc)/./src/lib/learning/continuousLearningEngine.ts\");\n/**\n * Continuous Learning Insights API\n * Provides AI-powered insights from audit logs and user behavior patterns\n */ \n\n// Force dynamic rendering for this API route\nconst dynamic = \"force-dynamic\";\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const action = searchParams.get(\"action\") || \"insights\";\n        const limit = parseInt(searchParams.get(\"limit\") || \"20\");\n        console.log(`Continuous Learning API called with action: ${action}`);\n        switch(action){\n            case \"insights\":\n                // Get recent learning insights\n                const recentInsights = _lib_learning_continuousLearningEngine__WEBPACK_IMPORTED_MODULE_1__.continuousLearningEngine.getRecentInsights(limit);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: true,\n                    data: {\n                        insights: recentInsights,\n                        summary: {\n                            totalInsights: recentInsights.length,\n                            criticalInsights: recentInsights.filter((i)=>i.severity === \"critical\").length,\n                            highInsights: recentInsights.filter((i)=>i.severity === \"high\").length,\n                            mediumInsights: recentInsights.filter((i)=>i.severity === \"medium\").length,\n                            lowInsights: recentInsights.filter((i)=>i.severity === \"low\").length\n                        },\n                        categories: {\n                            assessment: recentInsights.filter((i)=>i.category === \"assessment\").length,\n                            user_behavior: recentInsights.filter((i)=>i.category === \"user_behavior\").length,\n                            system_performance: recentInsights.filter((i)=>i.category === \"system_performance\").length,\n                            compliance: recentInsights.filter((i)=>i.category === \"compliance\").length\n                        }\n                    },\n                    timestamp: new Date().toISOString()\n                });\n            case \"cycle\":\n                // Run a new learning cycle\n                console.log(\"Running new learning cycle...\");\n                const learningCycle = await _lib_learning_continuousLearningEngine__WEBPACK_IMPORTED_MODULE_1__.continuousLearningEngine.runLearningCycle();\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: true,\n                    data: learningCycle,\n                    message: `Learning cycle ${learningCycle.status === \"completed\" ? \"completed successfully\" : \"failed\"}`,\n                    timestamp: new Date().toISOString()\n                });\n            case \"history\":\n                // Get learning cycle history\n                const learningHistory = _lib_learning_continuousLearningEngine__WEBPACK_IMPORTED_MODULE_1__.continuousLearningEngine.getLearningHistory();\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: true,\n                    data: {\n                        cycles: learningHistory,\n                        summary: {\n                            totalCycles: learningHistory.length,\n                            completedCycles: learningHistory.filter((c)=>c.status === \"completed\").length,\n                            failedCycles: learningHistory.filter((c)=>c.status === \"failed\").length,\n                            totalInsightsGenerated: learningHistory.reduce((sum, c)=>sum + c.summary.totalInsights, 0)\n                        }\n                    },\n                    timestamp: new Date().toISOString()\n                });\n            case \"summary\":\n                // Get learning summary\n                const history = _lib_learning_continuousLearningEngine__WEBPACK_IMPORTED_MODULE_1__.continuousLearningEngine.getLearningHistory();\n                const insights = _lib_learning_continuousLearningEngine__WEBPACK_IMPORTED_MODULE_1__.continuousLearningEngine.getRecentInsights(50);\n                const summary = {\n                    totalCycles: history.length,\n                    lastCycle: history[0] || null,\n                    recentInsights: insights.slice(0, 10),\n                    topCategories: getTopCategories(insights),\n                    criticalIssues: insights.filter((i)=>i.severity === \"critical\").length,\n                    recommendations: getAllRecommendations(insights)\n                };\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: true,\n                    data: summary,\n                    timestamp: new Date().toISOString()\n                });\n            default:\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: false,\n                    error: \"Invalid action parameter. Supported actions: insights, cycle, history, summary\"\n                }, {\n                    status: 400\n                });\n        }\n    } catch (error) {\n        console.error(\"Error in continuous learning API:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Failed to retrieve learning insights\",\n            details: error instanceof Error ? error.message : \"Unknown error\"\n        }, {\n            status: 500\n        });\n    }\n}\n/**\n * Get top categories from insights\n */ function getTopCategories(insights) {\n    const categories = {};\n    if (insights && Array.isArray(insights)) {\n        insights.forEach((insight)=>{\n            if (insight.category) {\n                categories[insight.category] = (categories[insight.category] || 0) + 1;\n            }\n        });\n    }\n    return Object.fromEntries(Object.entries(categories).sort(([, a], [, b])=>b - a).slice(0, 5));\n}\n/**\n * Get all recommendations from insights\n */ function getAllRecommendations(insights) {\n    const recommendations = new Set();\n    if (insights && Array.isArray(insights)) {\n        insights.forEach((insight)=>{\n            if (insight.recommendations && Array.isArray(insight.recommendations)) {\n                insight.recommendations.forEach((rec)=>recommendations.add(rec));\n            }\n        });\n    }\n    return Array.from(recommendations).slice(0, 20);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/learning/insights/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/learning/continuousLearningEngine.ts":
/*!******************************************************!*\
  !*** ./src/lib/learning/continuousLearningEngine.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContinuousLearningEngine: () => (/* binding */ ContinuousLearningEngine),\n/* harmony export */   continuousLearningEngine: () => (/* binding */ continuousLearningEngine)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ \"(rsc)/./src/lib/prisma.ts\");\n/**\n * Continuous Learning Engine\n * Analyzes audit logs and assessment patterns to improve system intelligence\n */ \n/**\n * Continuous Learning Engine for system improvement\n */ class ContinuousLearningEngine {\n    /**\n   * Run a complete learning cycle analyzing recent data\n   */ async runLearningCycle() {\n        const cycleId = `cycle_${Date.now()}`;\n        const startTime = new Date();\n        console.log(`Starting learning cycle: ${cycleId}`);\n        try {\n            // Analyze different data sources\n            const [assessmentInsights, userBehaviorInsights, systemPerformanceInsights, complianceInsights] = await Promise.all([\n                this.analyzeAssessmentPatterns(),\n                this.analyzeUserBehavior(),\n                this.analyzeSystemPerformance(),\n                this.analyzeCompliancePatterns()\n            ]);\n            const allInsights = [\n                ...assessmentInsights,\n                ...userBehaviorInsights,\n                ...systemPerformanceInsights,\n                ...complianceInsights\n            ];\n            const cycle = {\n                id: cycleId,\n                startTime,\n                endTime: new Date(),\n                status: \"completed\",\n                insights: allInsights,\n                summary: {\n                    totalInsights: allInsights.length,\n                    criticalInsights: allInsights.filter((i)=>i.severity === \"critical\").length,\n                    highImpactInsights: allInsights.filter((i)=>i.severity === \"high\").length,\n                    recommendationsGenerated: allInsights.reduce((sum, i)=>sum + i.recommendations.length, 0)\n                }\n            };\n            this.addLearningCycle(cycle);\n            console.log(`Learning cycle completed: ${cycleId} - ${allInsights.length} insights generated`);\n            return cycle;\n        } catch (error) {\n            console.error(`Learning cycle failed: ${cycleId}`, error);\n            const failedCycle = {\n                id: cycleId,\n                startTime,\n                endTime: new Date(),\n                status: \"failed\",\n                insights: [],\n                summary: {\n                    totalInsights: 0,\n                    criticalInsights: 0,\n                    highImpactInsights: 0,\n                    recommendationsGenerated: 0\n                }\n            };\n            this.addLearningCycle(failedCycle);\n            return failedCycle;\n        }\n    }\n    /**\n   * Analyze assessment patterns for optimization opportunities\n   */ async analyzeAssessmentPatterns() {\n        const insights = [];\n        try {\n            // Get recent assessment responses\n            const recentResponses = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.assessmentResponse.findMany({\n                include: {\n                    version: {\n                        include: {\n                            assessment: true\n                        }\n                    }\n                },\n                where: {\n                    createdAt: {\n                        gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // Last 7 days\n                    }\n                },\n                take: 1000\n            });\n            if (recentResponses.length === 0) {\n                return insights;\n            }\n            // Analyze response patterns by section\n            const sectionAnalysis = this.analyzeSectionPatterns(recentResponses);\n            // Generate insights from patterns\n            for (const [sectionId, analysis] of Object.entries(sectionAnalysis)){\n                if (analysis.difficultyScore > 80) {\n                    insights.push({\n                        id: `assessment_difficulty_${sectionId}`,\n                        type: \"optimization\",\n                        category: \"assessment\",\n                        severity: \"medium\",\n                        title: `High Difficulty Detected in Section: ${sectionId}`,\n                        description: `Section ${sectionId} shows high difficulty with ${analysis.difficultyScore}% complexity score`,\n                        data: analysis,\n                        recommendations: [\n                            \"Consider breaking down complex questions into smaller parts\",\n                            \"Add more detailed guidance and examples\",\n                            \"Provide interactive tooltips for technical terms\",\n                            \"Create video walkthroughs for complex sections\"\n                        ],\n                        confidence: 85,\n                        timestamp: new Date(),\n                        impact: {\n                            users: analysis.totalUsers,\n                            assessments: analysis.totalAssessments,\n                            performance: analysis.difficultyScore\n                        }\n                    });\n                }\n                if (analysis.completionRate < 60) {\n                    insights.push({\n                        id: `assessment_completion_${sectionId}`,\n                        type: \"pattern\",\n                        category: \"assessment\",\n                        severity: \"high\",\n                        title: `Low Completion Rate in Section: ${sectionId}`,\n                        description: `Only ${analysis.completionRate}% of users complete section ${sectionId}`,\n                        data: analysis,\n                        recommendations: [\n                            \"Investigate common dropoff points\",\n                            \"Simplify question flow and reduce cognitive load\",\n                            \"Add progress indicators and motivation elements\",\n                            \"Provide section-specific help resources\"\n                        ],\n                        confidence: 90,\n                        timestamp: new Date(),\n                        impact: {\n                            users: analysis.totalUsers,\n                            assessments: analysis.totalAssessments,\n                            performance: 100 - analysis.completionRate\n                        }\n                    });\n                }\n            }\n            // Analyze response time patterns\n            const avgResponseTime = this.calculateAverageResponseTime(recentResponses);\n            if (avgResponseTime > 300) {\n                insights.push({\n                    id: \"assessment_response_time\",\n                    type: \"optimization\",\n                    category: \"assessment\",\n                    severity: \"medium\",\n                    title: \"High Average Response Time Detected\",\n                    description: `Users are taking ${Math.round(avgResponseTime)} seconds on average to respond to questions`,\n                    data: {\n                        avgResponseTime,\n                        totalResponses: recentResponses.length\n                    },\n                    recommendations: [\n                        \"Review question clarity and complexity\",\n                        \"Add time estimates for each section\",\n                        \"Implement auto-save functionality\",\n                        \"Provide quick reference materials\"\n                    ],\n                    confidence: 75,\n                    timestamp: new Date(),\n                    impact: {\n                        users: new Set(recentResponses.map((r)=>r.version.assessment.tenantId || \"unknown\")).size,\n                        assessments: recentResponses.length,\n                        performance: avgResponseTime\n                    }\n                });\n            }\n        } catch (error) {\n            console.error(\"Error analyzing assessment patterns:\", error);\n        }\n        return insights;\n    }\n    /**\n   * Analyze user behavior patterns\n   */ async analyzeUserBehavior() {\n        const insights = [];\n        try {\n            // Get recent assessment versions to analyze user behavior\n            const recentVersions = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.assessmentVersion.findMany({\n                include: {\n                    assessment: true,\n                    responses: true\n                },\n                where: {\n                    createdAt: {\n                        gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // Last 7 days\n                    }\n                },\n                take: 500\n            });\n            if (recentVersions.length === 0) {\n                return insights;\n            }\n            // Analyze session patterns\n            const sessionAnalysis = this.analyzeSessionPatterns(recentVersions);\n            // Generate insights from user behavior\n            if (sessionAnalysis.avgSessionTime < 300) {\n                insights.push({\n                    id: \"user_session_time\",\n                    type: \"pattern\",\n                    category: \"user_behavior\",\n                    severity: \"medium\",\n                    title: \"Short User Sessions Detected\",\n                    description: `Average session time is only ${Math.round(sessionAnalysis.avgSessionTime)} seconds`,\n                    data: sessionAnalysis,\n                    recommendations: [\n                        \"Implement progressive disclosure to reduce initial overwhelm\",\n                        \"Add quick-start options for experienced users\",\n                        \"Create guided onboarding flow\",\n                        \"Provide session resumption capabilities\"\n                    ],\n                    confidence: 80,\n                    timestamp: new Date(),\n                    impact: {\n                        users: sessionAnalysis.totalUsers,\n                        assessments: recentVersions.length,\n                        performance: sessionAnalysis.avgSessionTime\n                    }\n                });\n            }\n            // Analyze completion patterns\n            if (sessionAnalysis.completionRate < 70) {\n                insights.push({\n                    id: \"user_completion_rate\",\n                    type: \"anomaly\",\n                    category: \"user_behavior\",\n                    severity: \"high\",\n                    title: \"Low Overall Completion Rate\",\n                    description: `Only ${sessionAnalysis.completionRate}% of users complete their assessments`,\n                    data: sessionAnalysis,\n                    recommendations: [\n                        \"Implement gamification elements\",\n                        \"Add milestone celebrations\",\n                        \"Provide personalized progress tracking\",\n                        \"Create accountability features\"\n                    ],\n                    confidence: 85,\n                    timestamp: new Date(),\n                    impact: {\n                        users: sessionAnalysis.totalUsers,\n                        assessments: recentVersions.length,\n                        performance: 100 - sessionAnalysis.completionRate\n                    }\n                });\n            }\n        } catch (error) {\n            console.error(\"Error analyzing user behavior:\", error);\n        }\n        return insights;\n    }\n    /**\n   * Analyze system performance patterns\n   */ async analyzeSystemPerformance() {\n        const insights = [];\n        try {\n            // Get recent audit logs\n            const recentLogs = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.assessmentAuditLog.findMany({\n                where: {\n                    performedAt: {\n                        gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // Last 24 hours\n                    }\n                },\n                take: 1000\n            });\n            if (recentLogs.length === 0) {\n                return insights;\n            }\n            // Analyze error patterns\n            const errorAnalysis = this.analyzeErrorPatterns(recentLogs);\n            if (errorAnalysis.errorRate > 0.05) {\n                insights.push({\n                    id: \"system_error_rate\",\n                    type: \"anomaly\",\n                    category: \"system_performance\",\n                    severity: \"high\",\n                    title: \"Elevated System Error Rate\",\n                    description: `System error rate is ${(errorAnalysis.errorRate * 100).toFixed(1)}%`,\n                    data: errorAnalysis,\n                    recommendations: [\n                        \"Investigate common error sources\",\n                        \"Implement better error handling\",\n                        \"Add system monitoring alerts\",\n                        \"Review recent code changes\"\n                    ],\n                    confidence: 90,\n                    timestamp: new Date(),\n                    impact: {\n                        users: errorAnalysis.affectedUsers,\n                        assessments: errorAnalysis.affectedAssessments,\n                        performance: errorAnalysis.errorRate * 100\n                    }\n                });\n            }\n            // Analyze performance patterns\n            const performanceAnalysis = this.analyzePerformancePatterns(recentLogs);\n            if (performanceAnalysis.avgResponseTime > 2000) {\n                insights.push({\n                    id: \"system_performance\",\n                    type: \"optimization\",\n                    category: \"system_performance\",\n                    severity: \"medium\",\n                    title: \"System Performance Degradation\",\n                    description: `Average response time is ${performanceAnalysis.avgResponseTime}ms`,\n                    data: performanceAnalysis,\n                    recommendations: [\n                        \"Optimize database queries\",\n                        \"Implement caching strategies\",\n                        \"Review server resources\",\n                        \"Add performance monitoring\"\n                    ],\n                    confidence: 75,\n                    timestamp: new Date(),\n                    impact: {\n                        users: performanceAnalysis.affectedUsers,\n                        assessments: performanceAnalysis.affectedAssessments,\n                        performance: performanceAnalysis.avgResponseTime\n                    }\n                });\n            }\n        } catch (error) {\n            console.error(\"Error analyzing system performance:\", error);\n        }\n        return insights;\n    }\n    /**\n   * Analyze compliance patterns\n   */ async analyzeCompliancePatterns() {\n        const insights = [];\n        try {\n            // Get recent assessment versions with compliance data\n            const recentVersions = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.assessmentVersion.findMany({\n                include: {\n                    assessment: true\n                },\n                where: {\n                    createdAt: {\n                        gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) // Last 30 days\n                    }\n                },\n                take: 1000\n            });\n            if (recentVersions.length === 0) {\n                return insights;\n            }\n            // Analyze compliance score patterns\n            const complianceAnalysis = this.analyzeComplianceScores(recentVersions);\n            if (complianceAnalysis.avgComplianceScore < 60) {\n                insights.push({\n                    id: \"compliance_score_trend\",\n                    type: \"trend\",\n                    category: \"compliance\",\n                    severity: \"critical\",\n                    title: \"Low Compliance Scores Detected\",\n                    description: `Average compliance score is ${complianceAnalysis.avgComplianceScore}%`,\n                    data: complianceAnalysis,\n                    recommendations: [\n                        \"Review assessment criteria and scoring\",\n                        \"Provide better compliance guidance\",\n                        \"Implement compliance checkpoints\",\n                        \"Add regulatory expert consultation\"\n                    ],\n                    confidence: 95,\n                    timestamp: new Date(),\n                    impact: {\n                        users: complianceAnalysis.totalUsers,\n                        assessments: recentVersions.length,\n                        performance: 100 - complianceAnalysis.avgComplianceScore\n                    }\n                });\n            }\n        } catch (error) {\n            console.error(\"Error analyzing compliance patterns:\", error);\n        }\n        return insights;\n    }\n    /**\n   * Analyze section patterns from assessment responses\n   */ analyzeSectionPatterns(responses) {\n        const sectionData = {};\n        responses.forEach((response)=>{\n            const sectionId = response.questionId.split(\"_\")[0]; // Extract section from question ID\n            if (!sectionData[sectionId]) {\n                sectionData[sectionId] = {\n                    totalResponses: 0,\n                    completedResponses: 0,\n                    totalUsers: new Set(),\n                    totalAssessments: new Set(),\n                    responseTimes: [],\n                    difficultyScore: 0\n                };\n            }\n            const data = sectionData[sectionId];\n            data.totalResponses++;\n            if (response.isCompleted) {\n                data.completedResponses++;\n            }\n            data.totalUsers.add(response.version.assessment.tenantId || \"unknown\");\n            data.totalAssessments.add(response.versionId);\n            if (response.responseTime) {\n                data.responseTimes.push(response.responseTime);\n            }\n        });\n        // Calculate metrics for each section\n        Object.keys(sectionData).forEach((sectionId)=>{\n            const data = sectionData[sectionId];\n            data.totalUsers = data.totalUsers.size;\n            data.totalAssessments = data.totalAssessments.size;\n            data.completionRate = data.totalResponses > 0 ? data.completedResponses / data.totalResponses * 100 : 0;\n            data.avgResponseTime = data.responseTimes.length > 0 ? data.responseTimes.reduce((sum, time)=>sum + time, 0) / data.responseTimes.length : 0;\n            // Calculate difficulty score based on completion rate and response time\n            data.difficultyScore = Math.max(0, 100 - data.completionRate + data.avgResponseTime / 10);\n        });\n        return sectionData;\n    }\n    /**\n   * Analyze session patterns from assessment versions\n   */ analyzeSessionPatterns(versions) {\n        const totalSessions = versions.length;\n        const completedSessions = versions.filter((v)=>v.status === \"completed\").length;\n        const totalUsers = new Set(versions.map((v)=>v.assessment.tenantId || \"unknown\")).size;\n        // Calculate average session time (simplified)\n        const avgSessionTime = versions.reduce((sum, v)=>{\n            const startTime = new Date(v.createdAt).getTime();\n            const endTime = new Date(v.updatedAt).getTime();\n            return sum + (endTime - startTime) / 1000; // Convert to seconds\n        }, 0) / totalSessions;\n        return {\n            totalSessions,\n            completedSessions,\n            completionRate: completedSessions / totalSessions * 100,\n            totalUsers,\n            avgSessionTime\n        };\n    }\n    /**\n   * Analyze error patterns from audit logs\n   */ analyzeErrorPatterns(logs) {\n        const errorLogs = logs.filter((log)=>log.action === \"error\" || log.details?.includes(\"error\"));\n        const errorRate = logs.length > 0 ? errorLogs.length / logs.length : 0;\n        const affectedUsers = new Set(errorLogs.map((log)=>log.userId)).size;\n        const affectedAssessments = new Set(errorLogs.map((log)=>log.assessmentId)).size;\n        return {\n            totalLogs: logs.length,\n            errorLogs: errorLogs.length,\n            errorRate,\n            affectedUsers,\n            affectedAssessments\n        };\n    }\n    /**\n   * Analyze performance patterns from audit logs\n   */ analyzePerformancePatterns(logs) {\n        const performanceLogs = logs.filter((log)=>log.details?.includes(\"response_time\"));\n        const avgResponseTime = performanceLogs.length > 0 ? performanceLogs.reduce((sum, log)=>{\n            const responseTime = parseInt(log.details?.match(/response_time:(\\d+)/)?.[1] || \"0\");\n            return sum + responseTime;\n        }, 0) / performanceLogs.length : 0;\n        const affectedUsers = new Set(performanceLogs.map((log)=>log.userId)).size;\n        const affectedAssessments = new Set(performanceLogs.map((log)=>log.assessmentId)).size;\n        return {\n            avgResponseTime,\n            affectedUsers,\n            affectedAssessments\n        };\n    }\n    /**\n   * Analyze compliance scores from assessment versions\n   */ analyzeComplianceScores(versions) {\n        const scores = versions.map((v)=>v.totalScore || 0).filter((score)=>score > 0);\n        const avgComplianceScore = scores.length > 0 ? scores.reduce((sum, score)=>sum + score, 0) / scores.length : 0;\n        const totalUsers = new Set(versions.map((v)=>v.assessment.tenantId || \"unknown\")).size;\n        return {\n            totalAssessments: versions.length,\n            avgComplianceScore,\n            totalUsers,\n            scoreDistribution: {\n                excellent: scores.filter((s)=>s >= 90).length,\n                good: scores.filter((s)=>s >= 70 && s < 90).length,\n                fair: scores.filter((s)=>s >= 50 && s < 70).length,\n                poor: scores.filter((s)=>s < 50).length\n            }\n        };\n    }\n    /**\n   * Calculate average response time from responses\n   */ calculateAverageResponseTime(responses) {\n        const responseTimes = responses.map((r)=>r.responseTime).filter((time)=>time && time > 0);\n        return responseTimes.length > 0 ? responseTimes.reduce((sum, time)=>sum + time, 0) / responseTimes.length : 0;\n    }\n    /**\n   * Add learning cycle to history\n   */ addLearningCycle(cycle) {\n        this.learningCycles.push(cycle);\n        // Keep only recent cycles\n        if (this.learningCycles.length > this.maxCycles) {\n            this.learningCycles = this.learningCycles.slice(-this.maxCycles);\n        }\n    }\n    /**\n   * Get recent learning insights\n   */ getRecentInsights(limit = 20) {\n        const allInsights = this.learningCycles.filter((cycle)=>cycle.status === \"completed\").flatMap((cycle)=>cycle.insights).sort((a, b)=>b.timestamp.getTime() - a.timestamp.getTime());\n        // If no real insights, provide sample insights for demo\n        if (allInsights.length === 0) {\n            return this.getSampleInsights(limit);\n        }\n        return allInsights.slice(0, limit);\n    }\n    /**\n   * Get sample insights for demo purposes\n   */ getSampleInsights(limit) {\n        const sampleInsights = [\n            {\n                id: \"insight_001\",\n                type: \"pattern\",\n                category: \"assessment\",\n                severity: \"high\",\n                title: \"AI Model Validation Section Shows High Drop-off Rate\",\n                description: \"Users are abandoning assessments at the AI Model Validation section 65% of the time, indicating complexity issues\",\n                data: {\n                    sectionId: \"model-validation\",\n                    dropoffRate: 0.65,\n                    avgTimeSpent: 180,\n                    commonExitPoints: [\n                        \"bias-detection\",\n                        \"performance-monitoring\"\n                    ]\n                },\n                recommendations: [\n                    \"Break down complex validation requirements into smaller steps\",\n                    \"Add interactive tutorials for technical concepts\",\n                    \"Implement progress saving to reduce abandonment fear\"\n                ],\n                confidence: 87,\n                timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),\n                impact: {\n                    users: 45,\n                    assessments: 32,\n                    performance: 65\n                }\n            },\n            {\n                id: \"insight_002\",\n                type: \"optimization\",\n                category: \"user_behavior\",\n                severity: \"medium\",\n                title: \"Data Science Persona Shows Highest Completion Rates\",\n                description: \"Users with Data Science background complete assessments 40% faster with 25% higher scores\",\n                data: {\n                    persona: \"Data Science\",\n                    avgCompletionTime: 1200,\n                    avgScore: 85,\n                    completionRate: 0.92\n                },\n                recommendations: [\n                    \"Create Data Science-specific assessment paths\",\n                    \"Leverage their expertise for peer mentoring programs\",\n                    \"Use their patterns to improve other persona experiences\"\n                ],\n                confidence: 92,\n                timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000),\n                impact: {\n                    users: 23,\n                    assessments: 18,\n                    performance: 92\n                }\n            },\n            {\n                id: \"insight_003\",\n                type: \"trend\",\n                category: \"compliance\",\n                severity: \"critical\",\n                title: \"FDA AI Governance Compliance Scores Declining\",\n                description: \"Average compliance scores for FDA AI Governance have dropped 15% over the last month\",\n                data: {\n                    currentScore: 62,\n                    previousScore: 77,\n                    trendDirection: \"declining\",\n                    affectedRegulations: [\n                        \"FDA AI/ML Guidance\",\n                        \"21 CFR Part 11\"\n                    ]\n                },\n                recommendations: [\n                    \"Update FDA guidance materials with latest requirements\",\n                    \"Implement automated compliance checking\",\n                    \"Provide expert consultation for complex cases\"\n                ],\n                confidence: 95,\n                timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000),\n                impact: {\n                    users: 67,\n                    assessments: 45,\n                    performance: 38\n                }\n            },\n            {\n                id: \"insight_004\",\n                type: \"anomaly\",\n                category: \"system_performance\",\n                severity: \"medium\",\n                title: \"Peak Usage Times Cause Response Delays\",\n                description: \"System response times increase by 40% during 2-4 PM EST, affecting user experience\",\n                data: {\n                    peakHours: [\n                        \"14:00-16:00\"\n                    ],\n                    avgResponseTime: 2400,\n                    normalResponseTime: 1700,\n                    affectedUsers: 89\n                },\n                recommendations: [\n                    \"Implement auto-scaling during peak hours\",\n                    \"Add load balancing for database queries\",\n                    \"Consider caching frequently accessed data\"\n                ],\n                confidence: 78,\n                timestamp: new Date(Date.now() - 8 * 60 * 60 * 1000),\n                impact: {\n                    users: 89,\n                    assessments: 56,\n                    performance: 41\n                }\n            },\n            {\n                id: \"insight_005\",\n                type: \"optimization\",\n                category: \"assessment\",\n                severity: \"low\",\n                title: \"Question Clarity Improvements Show Positive Results\",\n                description: \"Recent question rephrasing in Data Governance section increased completion rate by 18%\",\n                data: {\n                    sectionId: \"data-governance\",\n                    improvementRate: 0.18,\n                    beforeScore: 0.67,\n                    afterScore: 0.85\n                },\n                recommendations: [\n                    \"Apply similar clarity improvements to other sections\",\n                    \"Implement user feedback collection on question clarity\",\n                    \"Create question review process for new content\"\n                ],\n                confidence: 83,\n                timestamp: new Date(Date.now() - 12 * 60 * 60 * 1000),\n                impact: {\n                    users: 34,\n                    assessments: 28,\n                    performance: 82\n                }\n            }\n        ];\n        return sampleInsights.slice(0, limit);\n    }\n    /**\n   * Get learning cycle history\n   */ getLearningHistory() {\n        return this.learningCycles.sort((a, b)=>b.startTime.getTime() - a.startTime.getTime());\n    }\n    constructor(){\n        this.learningCycles = [];\n        this.maxCycles = 50;\n    }\n}\n// Export singleton instance\nconst continuousLearningEngine = new ContinuousLearningEngine();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/learning/continuousLearningEngine.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/prisma.ts":
/*!***************************!*\
  !*** ./src/lib/prisma.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nif (true) globalForPrisma.prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3ByaXNtYS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNkM7QUFFN0MsTUFBTUMsa0JBQWtCQztBQUlqQixNQUFNQyxTQUFTRixnQkFBZ0JFLE1BQU0sSUFBSSxJQUFJSCx3REFBWUEsR0FBRTtBQUVsRSxJQUFJSSxJQUF5QixFQUFjSCxnQkFBZ0JFLE1BQU0sR0FBR0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21wbGlhbmNlLWlxLy4vc3JjL2xpYi9wcmlzbWEudHM/MDFkNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcmlzbWFDbGllbnQgfSBmcm9tICdAcHJpc21hL2NsaWVudCdcblxuY29uc3QgZ2xvYmFsRm9yUHJpc21hID0gZ2xvYmFsVGhpcyBhcyB1bmtub3duIGFzIHtcbiAgcHJpc21hOiBQcmlzbWFDbGllbnQgfCB1bmRlZmluZWRcbn1cblxuZXhwb3J0IGNvbnN0IHByaXNtYSA9IGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPz8gbmV3IFByaXNtYUNsaWVudCgpXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSBnbG9iYWxGb3JQcmlzbWEucHJpc21hID0gcHJpc21hXG4iXSwibmFtZXMiOlsiUHJpc21hQ2xpZW50IiwiZ2xvYmFsRm9yUHJpc21hIiwiZ2xvYmFsVGhpcyIsInByaXNtYSIsInByb2Nlc3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/prisma.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Flearning%2Finsights%2Froute&page=%2Fapi%2Flearning%2Finsights%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Flearning%2Finsights%2Froute.ts&appDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftarinipersonal%2FDocuments%2FComplianceIQ&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();